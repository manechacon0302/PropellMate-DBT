{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.9.4", "generated_at": "2025-10-29T16:20:39.670550Z", "invocation_id": "37b47280-2a56-4da9-871c-e6b52c304d87", "env": {}, "project_name": "dbt_common_gold", "project_id": "810ccf184b55bb7f51aab55208557800", "user_id": null, "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"model.dbt_common_gold.Al_T_Agg_Activity_Date": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "Al_T_Agg_Activity_Date", "resource_type": "model", "package_name": "dbt_common_gold", "path": "agg\\Al_T_Agg_Activity_Date\\Al_T_Agg_Activity_Date.sql", "original_file_path": "models\\agg\\Al_T_Agg_Activity_Date\\Al_T_Agg_Activity_Date.sql", "unique_id": "model.dbt_common_gold.Al_T_Agg_Activity_Date", "fqn": ["dbt_common_gold", "agg", "Al_T_Agg_Activity_Date", "Al_T_Agg_Activity_Date"], "alias": "Al_T_Agg_Activity_Date", "checksum": {"name": "sha256", "checksum": "0bb689042dffdff567eed22e427bf1c1532fa6d91eef2453c0c3c8550e427337"}, "config": {"enabled": true, "alias": "Al_T_Agg_Activity_Date", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["DateTravel", "Date", "DateDeparture", "IdVehicle"], "unique_keys": ["IdDivision", "IdZu", "IdZone", "IdCg", "IdVehicleCompany", "IdDriver", "IdVehicle", "Date", "DateDeparture", "DateTravel", "LicensePlate", "IdEmployee", "ActivityDate"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "business_start_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "tags": [], "description": "Agg from silver TotalKM and TotalHours for activity vehicle for IdDivision, IdEmploye, IdZu, IdCompany, IdDriver, IdCg, LicensPlate, Vehicle, Date, DateTravel, DateDeparture per day", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\agg\\Al_T_Agg_Activity_Date\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Agg_Activity_Date", "unique_keys": ["IdDivision", "IdZu", "IdZone", "IdCg", "IdVehicleCompany", "IdDriver", "IdVehicle", "Date", "DateDeparture", "DateTravel", "LicensePlate", "IdEmployee", "ActivityDate"], "cluster_by": ["DateTravel", "Date", "DateDeparture", "IdVehicle"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "business_start_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "created_at": 1761754836.732133, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Agg_Activity_Date`", "raw_code": "SELECT\n  Date,\n  DateTravel,\n  DateDeparture,\n  IdDivision,\n  IdCg,\n  IdZu,\n  IdZone,\n  IdDriver,\n  IdEmployee,\n  IdVehicle,\n  LicensePlate,\n  IdVehicleCompany,\n  TotalKilometers,\n  TotalHours,\n  ActivityDate\nFROM (\n  SELECT * FROM  {{ source(\"bq_agg_silver_com\", \"Al_T_Agg_Activity_Date\") }}\n  WHERE\n    CURRENT_TIMESTAMP() BETWEEN ValidStartDate\n    AND COALESCE(ValidEndDate, '3000-1-1') \n  \n     )", "language": "sql", "refs": [], "sources": [["bq_agg_silver_com", "Al_T_Agg_Activity_Date"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_common_gold.bq_agg_silver_com.Al_T_Agg_Activity_Date"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.Al_T_Dim_AlsaProviders": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "Al_T_Dim_AlsaProviders", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\Al_T_Dim_AlsaProviders\\Al_T_Dim_AlsaProviders.sql", "original_file_path": "models\\dim\\Al_T_Dim_AlsaProviders\\Al_T_Dim_AlsaProviders.sql", "unique_id": "model.dbt_common_gold.Al_T_Dim_AlsaProviders", "fqn": ["dbt_common_gold", "dim", "Al_T_Dim_AlsaProviders", "Al_T_Dim_AlsaProviders"], "alias": "Al_T_Dim_AlsaProviders", "checksum": {"name": "sha256", "checksum": "08d5f29b9689a7cc39cfa4ead53611d62f6480c94bd553df30d867d2d6a6f4f5"}, "config": {"enabled": true, "alias": "Al_T_Dim_AlsaProviders", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["ThirdPartyCode", "CompanyCode"], "business_start_date": "CURRENT_TIMESTAMP()", "modif_date": "DATE_SUB(CURRENT_DATE(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true}, "tags": [], "description": "Tabla de gold Proveedores Alsa", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\Al_T_Dim_AlsaProviders\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Dim_AlsaProviders", "unique_keys": ["ThirdPartyCode", "CompanyCode"], "business_start_date": "CURRENT_TIMESTAMP()", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_DATE(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true}, "created_at": 1761754836.7466664, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_AlsaProviders`", "raw_code": "SELECT\n  ThirdPartyCode,\n  CompanyCode,\n  ThirdPartyName,\n  NIF,\n  LongDescription,\n  AcronymCode,\n  Address,\n  Number,\n  PostalCode,\n  GroupCode,\n  CountryCode,\n  ProvinceCode,\n  MunicipalityCode,\n  Phone1,\n  Phone2,\n  Phone3,\n  Fax,\n  Email,\n  ZoneCode,\n  UnifiedNIF,\n  GlobalNIF,\n  StartDate,\n  UpdateDate\n\nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_AlsaProviders') }}\nWHERE {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\n  BETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')\nAND DATE(modifdate) >= {{ var(\"modif_date\", get_config_value_v4(\"modif_date\")) }}", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_AlsaProviders"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_AlsaProviders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.Al_T_Dim_Employee": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "Al_T_Dim_Employee", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\Al_T_Dim_Employee\\Al_T_Dim_Employee.sql", "original_file_path": "models\\dim\\Al_T_Dim_Employee\\Al_T_Dim_Employee.sql", "unique_id": "model.dbt_common_gold.Al_T_Dim_Employee", "fqn": ["dbt_common_gold", "dim", "Al_T_Dim_Employee", "Al_T_Dim_Employee"], "alias": "Al_T_Dim_Employee", "checksum": {"name": "sha256", "checksum": "dc85781769ca7892ba5574aad4debdfe62c0a1e1b66690fbd4971fe6e83f80c9"}, "config": {"enabled": true, "alias": "Al_T_Dim_Employee", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["IdCompany", "IdDriver"], "business_start_date": "parse_timestamp(\"%Y%M%d\", CAST(DateDriverStart AS STRING))", "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "tags": [], "description": "Tabla de silver", "columns": {"MaritalStatus": {"name": "MaritalStatus", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null, "policy_tags": ["projects/prj-bze-dev-westeu-01/locations/europe-west1/taxonomies/3706336757786153057/policyTags/6567225512041647482"]}, "Sex": {"name": "Sex", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null, "policy_tags": ["projects/prj-bze-dev-westeu-01/locations/europe-west1/taxonomies/3706336757786153057/policyTags/6567225512041647482"]}, "IdNational": {"name": "IdNational", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null, "policy_tags": ["projects/prj-bze-dev-westeu-01/locations/europe-west1/taxonomies/3706336757786153057/policyTags/6567225512041647482"]}, "Name": {"name": "Name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null, "policy_tags": ["projects/prj-bze-dev-westeu-01/locations/europe-west1/taxonomies/3706336757786153057/policyTags/6567225512041647482"]}, "Surname1": {"name": "Surname1", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null, "policy_tags": ["projects/prj-bze-dev-westeu-01/locations/europe-west1/taxonomies/3706336757786153057/policyTags/6567225512041647482"]}, "Surname2": {"name": "Surname2", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null, "policy_tags": ["projects/prj-bze-dev-westeu-01/locations/europe-west1/taxonomies/3706336757786153057/policyTags/6567225512041647482"]}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\Al_T_Dim_Employee\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Dim_Employee", "unique_keys": ["IdCompany", "IdDriver"], "business_start_date": "parse_timestamp(\"%Y%M%d\", CAST(DateDriverStart AS STRING))", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "created_at": 1761754836.756224, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_Employee`", "raw_code": "SELECT\n    IdCompany,\n    IdEmployee,\n    IdDriver,\n    IdNational,\n    Name,\n    Surname1,\n    Surname2,\n    MaritalStatus,\n    Sex,\n    DateBirth,\n    DateDriverStart,\n    DateDriverEnd,\n    ContractDate,\n    FlgDriver\n\nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_Employee') }} \n{% if is_incremental() %}\n   WHERE modifdate >= {{ var(\"modif_date\", get_config_value_v4(\"modif_date\")) }}\n{% else %}\n  WHERE 1=1\n{% endif %}\nAND {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\nBETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_Employee"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Employee"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.Al_T_Dim_Gender": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "Al_T_Dim_Gender", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\Al_T_Dim_Gender\\Al_T_Dim_Gender.sql", "original_file_path": "models\\dim\\Al_T_Dim_Gender\\Al_T_Dim_Gender.sql", "unique_id": "model.dbt_common_gold.Al_T_Dim_Gender", "fqn": ["dbt_common_gold", "dim", "Al_T_Dim_Gender", "Al_T_Dim_Gender"], "alias": "Al_T_Dim_Gender", "checksum": {"name": "sha256", "checksum": "721a5a77234367f812b85d06f1d067a8c68fbb0e41a7e029868f7b5b1743585f"}, "config": {"enabled": true, "alias": "Al_T_Dim_Gender", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["Gender"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "tags": [], "description": "Tabla de gold", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\Al_T_Dim_Gender\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Dim_Gender", "unique_keys": ["Gender"], "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "created_at": 1761754836.7572248, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_Gender`", "raw_code": "SELECT\nGender,\nDesc_Gender,\n\nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_Gender') }}\n\n{% if is_incremental() %}\n   WHERE modifdate >= {{ var(\"modif_date\", get_config_value_v4(\"modif_date\")) }}\n{% else %}\n  WHERE 1=1\n{% endif %}\nAND {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\nBETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_Gender"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Gender"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.Al_T_Dim_JourneyLines": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "Al_T_Dim_JourneyLines", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\Al_T_Dim_JourneyLines\\Al_T_Dim_JourneyLines.sql", "original_file_path": "models\\dim\\Al_T_Dim_JourneyLines\\Al_T_Dim_JourneyLines.sql", "unique_id": "model.dbt_common_gold.Al_T_Dim_JourneyLines", "fqn": ["dbt_common_gold", "dim", "Al_T_Dim_JourneyLines", "Al_T_Dim_JourneyLines"], "alias": "Al_T_Dim_JourneyLines", "checksum": {"name": "sha256", "checksum": "210568445a8c5a73598db9e5fa55163aa97634e8ddfeeae2a842a101458cfb8c"}, "config": {"enabled": true, "alias": "Al_T_Dim_JourneyLines", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["IdJourney", "IdLine"], "business_start_date": "CURRENT_TIMESTAMP()", "version_date": "CURRENT_TIMESTAMP()", "historic": true}, "tags": [], "description": "Tabla de gold Lineas-Trayecto", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\Al_T_Dim_JourneyLines\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Dim_JourneyLines", "unique_keys": ["IdJourney", "IdLine"], "business_start_date": "CURRENT_TIMESTAMP()", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "version_date": "CURRENT_TIMESTAMP()", "historic": true}, "created_at": 1761754836.7592332, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_JourneyLines`", "raw_code": "SELECT \n    T.IdJourney,\n    T.IdOrigin,\n    T.OriginTown,\n    T.IdOriginAlias,\n    T.OriginAlias,\n    T.IdDestination,\n    T.DestinationTown,\n    T.IdDestinationAlias,\n    T.DestinationAlias,\n    T.Journey,\n    T.IdLine,\n    T.LineType,\n    T.Distance,\n    R.IdRoute,\n    R.Route\n\nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_Journey') }} T\nLEFT JOIN {{ source('bq_dim_silver_com', 'Al_T_Dim_Route') }} R\n    ON (T.IdOrigin = R.Town1 AND T.IdDestination = R.Town2) OR (T.IdOrigin = R.Town2 AND T.IdDestination = R.Town1)\nWHERE CURRENT_TIMESTAMP() BETWEEN T.ValidStartDate AND COALESCE(T.ValidEndDate, '3000-1-1')\nAND\n    (\n        CURRENT_TIMESTAMP() BETWEEN R.ValidStartDate AND COALESCE(R.ValidEndDate, '3000-1-1') OR\n        R.Town1 IS NULL\n    )", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_Journey"], ["bq_dim_silver_com", "Al_T_Dim_Route"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Journey", "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Route"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.Al_T_Dim_MaritalStatus": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "Al_T_Dim_MaritalStatus", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\Al_T_Dim_MaritalStatus\\Al_T_Dim_MaritalStatus.sql", "original_file_path": "models\\dim\\Al_T_Dim_MaritalStatus\\Al_T_Dim_MaritalStatus.sql", "unique_id": "model.dbt_common_gold.Al_T_Dim_MaritalStatus", "fqn": ["dbt_common_gold", "dim", "Al_T_Dim_MaritalStatus", "Al_T_Dim_MaritalStatus"], "alias": "Al_T_Dim_MaritalStatus", "checksum": {"name": "sha256", "checksum": "850fb66410a4aaf342cec8ef287f345c1dd53cc856bef78b44f1ea6fae59c2d4"}, "config": {"enabled": true, "alias": "Al_T_Dim_MaritalStatus", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["MaritalStatus"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "tags": [], "description": "Tabla de gold", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\Al_T_Dim_MaritalStatus\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Dim_MaritalStatus", "unique_keys": ["MaritalStatus"], "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "created_at": 1761754836.7602322, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_MaritalStatus`", "raw_code": "SELECT\nMaritalStatus,\nDesc_MaritalStatus\n\nFROM {{ source('bq_dim_silver_com_marital', 'Al_T_Dim_MaritalStatus') }}\n{% if is_incremental() %}\n   WHERE modifdate >= {{ var(\"modif_date\", get_config_value_v4(\"modif_date\")) }}\n{% else %}\n  WHERE 1=1\n{% endif %}\nAND {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\nBETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com_marital", "Al_T_Dim_MaritalStatus"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_common_gold.bq_dim_silver_com_marital.Al_T_Dim_MaritalStatus"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.Al_T_Dim_RouteJourneys": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "Al_T_Dim_RouteJourneys", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\Al_T_Dim_RouteJourneys\\Al_T_Dim_RouteJourneys.sql", "original_file_path": "models\\dim\\Al_T_Dim_RouteJourneys\\Al_T_Dim_RouteJourneys.sql", "unique_id": "model.dbt_common_gold.Al_T_Dim_RouteJourneys", "fqn": ["dbt_common_gold", "dim", "Al_T_Dim_RouteJourneys", "Al_T_Dim_RouteJourneys"], "alias": "Al_T_Dim_RouteJourneys", "checksum": {"name": "sha256", "checksum": "39b939fed86cf67b0a92806e855ae92b87b5ddebc08a5e765bba03519fd324aa"}, "config": {"enabled": true, "alias": "Al_T_Dim_RouteJourneys", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["IdJourney"], "business_start_date": "CURRENT_TIMESTAMP()", "version_date": "CURRENT_TIMESTAMP()", "historic": true}, "tags": [], "description": "Tabla de gold Trayectos-Ruta", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\Al_T_Dim_RouteJourneys\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Dim_RouteJourneys", "unique_keys": ["IdJourney"], "business_start_date": "CURRENT_TIMESTAMP()", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "version_date": "CURRENT_TIMESTAMP()", "historic": true}, "created_at": 1761754836.7612321, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_RouteJourneys`", "raw_code": "SELECT DISTINCT\n    T.IdJourney,\n    T.IdOrigin,\n    T.OriginTown,\n    T.IdOriginAlias,\n    T.OriginAlias,\n    T.IdDestination,\n    T.DestinationTown,\n    T.IdDestinationAlias,\n    T.DestinationAlias,\n    T.Journey,\n    T.Distance,\n    R.IdRoute,\n    R.Route\n\nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_Journey') }} T\nLEFT JOIN {{ source('bq_dim_silver_com', 'Al_T_Dim_Route') }} R\nON (T.IdOrigin = R.Town1 AND T.IdDestination = R.Town2) OR (T.IdOrigin = R.Town2 AND T.IdDestination = R.Town1)\nWHERE CURRENT_TIMESTAMP() BETWEEN T.ValidStartDate AND COALESCE(T.ValidEndDate, '3000-1-1')\nAND\n    (\n        CURRENT_TIMESTAMP() BETWEEN R.ValidStartDate AND COALESCE(R.ValidEndDate, '3000-1-1') OR\n        R.Town1 IS NULL\n    )", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_Journey"], ["bq_dim_silver_com", "Al_T_Dim_Route"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Journey", "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Route"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.Al_T_Dim_RutasAlsaSEO": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "Al_T_Dim_RutasAlsaSEO", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\Al_T_Dim_RutasAlsaSEO\\Al_T_Dim_RutasAlsaSEO.sql", "original_file_path": "models\\dim\\Al_T_Dim_RutasAlsaSEO\\Al_T_Dim_RutasAlsaSEO.sql", "unique_id": "model.dbt_common_gold.Al_T_Dim_RutasAlsaSEO", "fqn": ["dbt_common_gold", "dim", "Al_T_Dim_RutasAlsaSEO", "Al_T_Dim_RutasAlsaSEO"], "alias": "Al_T_Dim_RutasAlsaSEO", "checksum": {"name": "sha256", "checksum": "4e2b0b4e896ca1a20d7f5548f540478dd3effc1f27c6b005ad539804ee5247aa"}, "config": {"enabled": true, "alias": "Al_T_Dim_RutasAlsaSEO", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["ModifDate", "validStartDate", "ValidEndDate", "DeleteDate"]}, "tags": [], "description": "Tabla de gold Rutas Landing Alsa", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\Al_T_Dim_RutasAlsaSEO\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "enabled": true, "alias": "Al_T_Dim_RutasAlsaSEO", "cluster_by": ["ModifDate", "validStartDate", "ValidEndDate", "DeleteDate"]}, "created_at": 1761754836.7622323, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_RutasAlsaSEO`", "raw_code": "SELECT\n    CAST(Null AS STRING) AS IdCluster,\n    IdOrigin,\n    OriginName,\n    IdDestination,\n    DestinationName,\n    Url,\n    -- AUDITORIA\n    CAST(NULL AS STRING) as IdControl,\n    CAST(CURRENT_TIMESTAMP() AS TIMESTAMP) as CreateDate,\n    'DBT' as CreateUser,\n    CAST(CURRENT_TIMESTAMP() AS TIMESTAMP) as ModifDate,\n    'DBT' as ModifUser,\n    CAST(NULL AS TIMESTAMP) as DeleteDate,\n    CAST(NULL AS STRING) as DeleteUser,\n    CAST(CURRENT_TIMESTAMP() AS TIMESTAMP) as ValidStartDate,\n    CAST(NULL AS TIMESTAMP) as ValidEndDate\n\nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_RutasAlsaSEO') }}", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_RutasAlsaSEO"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_RutasAlsaSEO"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.Al_T_Dim_Systems": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "Al_T_Dim_Systems", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\Al_T_Dim_Systems\\Al_T_Dim_Systems.sql", "original_file_path": "models\\dim\\Al_T_Dim_Systems\\Al_T_Dim_Systems.sql", "unique_id": "model.dbt_common_gold.Al_T_Dim_Systems", "fqn": ["dbt_common_gold", "dim", "Al_T_Dim_Systems", "Al_T_Dim_Systems"], "alias": "Al_T_Dim_Systems", "checksum": {"name": "sha256", "checksum": "cf7fceead75395f945f86630577fc2c1b69139f460525c949d37e9371d28dc4a"}, "config": {"enabled": true, "alias": "Al_T_Dim_Systems", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["IdExplot"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "tags": [], "description": "Tabla de Gold ObtExplot", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\Al_T_Dim_Systems\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Dim_Systems", "unique_keys": ["IdExplot"], "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "created_at": 1761754836.7642312, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_Systems`", "raw_code": "SELECT \n\nIdExplot               as IdExplot,\nDescription            as Description,\nIdCompany              as IdCompany,\nIdZone                 as IdZone,\nIdOfficialConcession   as IdOfficialConcession,\nObtTablet              as ObtTablet,\nLatitude               as Latitude,\nLongitude              as Longitude,\nStrategy               as Strategy,\nTimeZone               as TimeZone,\nRti                    as Rti,\nTla                    as Tla,\nCadence                as Cadence\n\nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_Systems') }} \n\n/* Historic Condition */\nWHERE {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }} BETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_Systems"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Systems"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.Al_T_Dim_TownAlias": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "Al_T_Dim_TownAlias", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\Al_T_Dim_TownAlias\\Al_T_Dim_TownAlias.sql", "original_file_path": "models\\dim\\Al_T_Dim_TownAlias\\Al_T_Dim_TownAlias.sql", "unique_id": "model.dbt_common_gold.Al_T_Dim_TownAlias", "fqn": ["dbt_common_gold", "dim", "Al_T_Dim_TownAlias", "Al_T_Dim_TownAlias"], "alias": "Al_T_Dim_TownAlias", "checksum": {"name": "sha256", "checksum": "86dc13963ec03ae2369278f802b415b3ce10b5b018e95b69edfaf175b33d7151"}, "config": {"enabled": true, "alias": "Al_T_Dim_TownAlias", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["IdTown"], "business_start_date": "CURRENT_TIMESTAMP()", "version_date": "CURRENT_TIMESTAMP()", "historic": true}, "tags": [], "description": "Tabla de gold Alias Pueblo", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\Al_T_Dim_TownAlias\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Dim_TownAlias", "unique_keys": ["IdTown"], "business_start_date": "CURRENT_TIMESTAMP()", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "version_date": "CURRENT_TIMESTAMP()", "historic": true}, "created_at": 1761754836.7651627, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_TownAlias`", "raw_code": "SELECT \n    IdTown,\n    IdAlias,\n    Alias\n\nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_TownAlias') }}\nWHERE CURRENT_TIMESTAMP() BETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_TownAlias"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_TownAlias"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.Al_T_Dim_Translations": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "Al_T_Dim_Translations", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\Al_T_Dim_Translations\\Al_T_Dim_Translations.sql", "original_file_path": "models\\dim\\Al_T_Dim_Translations\\Al_T_Dim_Translations.sql", "unique_id": "model.dbt_common_gold.Al_T_Dim_Translations", "fqn": ["dbt_common_gold", "dim", "Al_T_Dim_Translations", "Al_T_Dim_Translations"], "alias": "Al_T_Dim_Translations", "checksum": {"name": "sha256", "checksum": "c3bbd7db435cfd7798ae37f36148a4acdb98f8119384c1120f6e9e42333b5c89"}, "config": {"enabled": true, "alias": "Al_T_Dim_Translations", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["ID", "TableName", "Language"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "tags": [], "description": "Tabla de gold", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\Al_T_Dim_Translations\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Dim_Translations", "unique_keys": ["ID", "TableName", "Language"], "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "created_at": 1761754836.766816, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_Translations`", "raw_code": "SELECT\nDataset,\nTableName,\nID,\nLanguage,\nDescription\n\nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_Translations') }}\n\n{% if is_incremental() %}\n   WHERE modifdate >= {{ var(\"modif_date\", get_config_value_v4(\"modif_date\")) }}\n{% else %}\n  WHERE 1=1\n{% endif %}\nAND {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\nBETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_Translations"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Translations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.dim_coche": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "dim_coche", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\dim_coche\\dim_coche.sql", "original_file_path": "models\\dim\\dim_coche\\dim_coche.sql", "unique_id": "model.dbt_common_gold.dim_coche", "fqn": ["dbt_common_gold", "dim", "dim_coche", "dim_coche"], "alias": "Al_T_Dim_Vehicle", "checksum": {"name": "sha256", "checksum": "a6d9be2fbe1f9dd194c1d6c7d2426592104e254f21475bce9d2aac68988a3121"}, "config": {"enabled": true, "alias": "Al_T_Dim_Vehicle", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["IdVehicle", "IdTypeOrigin"], "business_start_date": "COALESCE(safe.parse_timestamp(\"%Y%M%d\", (CAST(DateVehicleStart AS STRING))), \"1900-1-1\")", "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "tags": [], "description": "Tabla de gold", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\dim_coche\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Dim_Vehicle", "unique_keys": ["IdVehicle", "IdTypeOrigin"], "business_start_date": "COALESCE(safe.parse_timestamp(\"%Y%M%d\", (CAST(DateVehicleStart AS STRING))), \"1900-1-1\")", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "created_at": 1761754836.7688189, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_Vehicle`", "raw_code": "SELECT \nIdVehicle,\nIdTypeOrigin,\nLicensePlate,\nDateVehicleStart,\nDateVehicleEnd,\nOwned,\nVehicleType,\nIdBrand,\nIdModel,\nSeats,\nSerialNumber,\nSize,\nRegistrationDate,\nIdFuel,\nVehicleClasification\n\nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_Vehicle') }} \n\n{% if is_incremental() %}\n   WHERE modifdate >= {{ var(\"modif_date\", get_config_value_v4(\"modif_date\")) }}\n{% else %}\n  WHERE 1=1\n{% endif %}\nAND {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\nBETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_Vehicle"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Vehicle"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.dim_combustible": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "dim_combustible", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\dim_combustible\\dim_combustible.sql", "original_file_path": "models\\dim\\dim_combustible\\dim_combustible.sql", "unique_id": "model.dbt_common_gold.dim_combustible", "fqn": ["dbt_common_gold", "dim", "dim_combustible", "dim_combustible"], "alias": "Al_T_Dim_Fuel", "checksum": {"name": "sha256", "checksum": "e80cfecf04140a0eec3b69d06589b23391586ca7221f1f6d6a688610ac4495ac"}, "config": {"enabled": true, "alias": "Al_T_Dim_Fuel", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["IdFuel"], "business_start_date": "parse_timestamp(\"%Y%M%d\", CAST(DateFuelCreate AS STRING))", "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "tags": [], "description": "Tabla de silver", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\dim_combustible\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Dim_Fuel", "unique_keys": ["IdFuel"], "business_start_date": "parse_timestamp(\"%Y%M%d\", CAST(DateFuelCreate AS STRING))", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "created_at": 1761754836.770396, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_Fuel`", "raw_code": "SELECT \nIdFuel,\t\nFuel,\t\nDateFuelCreate,\t\nDateFuelModif,\t\nUserFuelCreate,\t\nUserFuelModif\nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_Fuel') }} \n{% if is_incremental() %}\n   WHERE modifdate >= {{ var(\"modif_date\", get_config_value_v4(\"modif_date\")) }}\n{% else %}\n  WHERE 1=1\n{% endif %}\nAND {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\nBETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_Fuel"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Fuel"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.dim_concesion": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "dim_concesion", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\dim_concesion\\dim_concesion.sql", "original_file_path": "models\\dim\\dim_concesion\\dim_concesion.sql", "unique_id": "model.dbt_common_gold.dim_concesion", "fqn": ["dbt_common_gold", "dim", "dim_concesion", "dim_concesion"], "alias": "Al_T_Dim_Concession", "checksum": {"name": "sha256", "checksum": "7883b3740c06db3f0e652249b10ba9acb83e2249b07add015a560234a38f3b27"}, "config": {"enabled": true, "alias": "Al_T_Dim_Concession", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["IdCompany", "IdConcession"], "business_start_date": "TIMESTAMP('1900-01-01')", "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "tags": [], "description": "Tabla de gold concesion", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\dim_concesion\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Dim_Concession", "unique_keys": ["IdCompany", "IdConcession"], "business_start_date": "TIMESTAMP('1900-01-01')", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "created_at": 1761754836.7730167, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_Concession`", "raw_code": "SELECT \nIdCompany,\nIdConcession,\nAbvConcession,\nConcession,\nTEMPConcession,\nAUTOCON,\nDateAplication,\nObservation1,\nObservation2,\nIV,\nVTA,\nUserConcessionModif,\nDateConcessionModif,\nDayValidate,\nConcessionOfi,\nFormatQR,\nCKRT\n\nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_Concession') }} \n{% if is_incremental() %}\n   WHERE modifdate >= {{ var(\"modif_date\", get_config_value_v4(\"modif_date\")) }}\n{% else %}\n  WHERE 1=1\n{% endif %}\nAND {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\nBETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_Concession"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Concession"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.dim_conductor": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "dim_conductor", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\dim_conductor\\dim_conductor.sql", "original_file_path": "models\\dim\\dim_conductor\\dim_conductor.sql", "unique_id": "model.dbt_common_gold.dim_conductor", "fqn": ["dbt_common_gold", "dim", "dim_conductor", "dim_conductor"], "alias": "Al_T_Dim_Driver_2", "checksum": {"name": "sha256", "checksum": "48b02054d1ba6471d9b95d0583461cafc0ec632236041ea1550771de080d663b"}, "config": {"enabled": true, "alias": "Al_T_Dim_Driver_2", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["IdCompany", "IdDriver"], "business_start_date": "parse_timestamp(\"%Y%M%d\", CAST(DateDriverStart AS STRING))", "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "tags": [], "description": "Tabla de gold", "columns": {"MaritalStatus": {"name": "MaritalStatus", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null, "policy_tags": ["projects/prj-bze-dev-westeu-01/locations/europe-west1/taxonomies/3706336757786153057/policyTags/6567225512041647482"]}, "Sex": {"name": "Sex", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null, "policy_tags": ["projects/prj-bze-dev-westeu-01/locations/europe-west1/taxonomies/3706336757786153057/policyTags/6567225512041647482"]}, "IdNational": {"name": "IdNational", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null, "policy_tags": ["projects/prj-bze-dev-westeu-01/locations/europe-west1/taxonomies/3706336757786153057/policyTags/6567225512041647482"]}, "Name": {"name": "Name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null, "policy_tags": ["projects/prj-bze-dev-westeu-01/locations/europe-west1/taxonomies/3706336757786153057/policyTags/6567225512041647482"]}, "Surname1": {"name": "Surname1", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null, "policy_tags": ["projects/prj-bze-dev-westeu-01/locations/europe-west1/taxonomies/3706336757786153057/policyTags/6567225512041647482"]}, "Surname2": {"name": "Surname2", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null, "policy_tags": ["projects/prj-bze-dev-westeu-01/locations/europe-west1/taxonomies/3706336757786153057/policyTags/6567225512041647482"]}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\dim_conductor\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Dim_Driver_2", "unique_keys": ["IdCompany", "IdDriver"], "business_start_date": "parse_timestamp(\"%Y%M%d\", CAST(DateDriverStart AS STRING))", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "created_at": 1761754836.7776725, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_Driver_2`", "raw_code": "SELECT \nIdZone,\nIdDivision,\nIdZu,\nIdCg,\nIdAxis,\nIdCompany,\nIdEmployee,\nIdDriver,\nIdNational,\nName,\nSurname1,\nSurname2,\nMaritalStatus,\nSex,\nContractDate,\nDateDriverStart,\nDateDriverEnd,\nDateBirth\n\nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_Driver') }} \n\nWHERE {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\nBETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_Driver"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Driver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.dim_division": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "dim_division", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\dim_division\\dim_division.sql", "original_file_path": "models\\dim\\dim_division\\dim_division.sql", "unique_id": "model.dbt_common_gold.dim_division", "fqn": ["dbt_common_gold", "dim", "dim_division", "dim_division"], "alias": "Al_T_Dim_Division", "checksum": {"name": "sha256", "checksum": "17f17368b115c89f8e25d34cb84506648aed4d1cf4f8c4ab77b449fc66e96007"}, "config": {"enabled": true, "alias": "Al_T_Dim_Division", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["IdDivision"], "business_start_date": "parse_timestamp(\"%Y%M%d\", CAST(DateDivisionStart AS STRING))", "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "tags": [], "description": "Tabla de gold", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\dim_division\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Dim_Division", "unique_keys": ["IdDivision"], "business_start_date": "parse_timestamp(\"%Y%M%d\", CAST(DateDivisionStart AS STRING))", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "created_at": 1761754836.7796686, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_Division`", "raw_code": "SELECT \n\nIdDivision,\nDivision,\nDateDivisionStart,\nDateDivisionEnd \n\nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_Division') }} \n\nWHERE {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\nBETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_Division"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Division"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.dim_ejes": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "dim_ejes", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\dim_ejes\\dim_ejes.sql", "original_file_path": "models\\dim\\dim_ejes\\dim_ejes.sql", "unique_id": "model.dbt_common_gold.dim_ejes", "fqn": ["dbt_common_gold", "dim", "dim_ejes", "dim_ejes"], "alias": "Al_T_Dim_Axis", "checksum": {"name": "sha256", "checksum": "e8df5658fb6ef3865d31577954c9dc1c67dd18b820d34e838344aacc7b55182d"}, "config": {"enabled": true, "alias": "Al_T_Dim_Axis", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["IdAxis"], "business_start_date": "parse_timestamp(\"%Y%M%d\", CAST(DateAxisStart AS STRING))", "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "tags": [], "description": "Tabla de silver", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\dim_ejes\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Dim_Axis", "unique_keys": ["IdAxis"], "business_start_date": "parse_timestamp(\"%Y%M%d\", CAST(DateAxisStart AS STRING))", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "created_at": 1761754836.781665, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_Axis`", "raw_code": "SELECT \n\nIdAxis,\nAxis,\nDateAxisStart,\nDateAxisEnd\n\nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_Axis') }} \n\n{% if is_incremental() %}\n   WHERE modifdate >= {{ var(\"modif_date\", get_config_value_v4(\"modif_date\")) }}\n{% else %}\n  WHERE 1=1\n{% endif %}\nAND {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\nBETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_Axis"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Axis"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.dim_empresas": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "dim_empresas", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\dim_empresas\\dim_empresas.sql", "original_file_path": "models\\dim\\dim_empresas\\dim_empresas.sql", "unique_id": "model.dbt_common_gold.dim_empresas", "fqn": ["dbt_common_gold", "dim", "dim_empresas", "dim_empresas"], "alias": "Al_T_Dim_Company", "checksum": {"name": "sha256", "checksum": "c9099e2af0fe954545a0c07caa40f8eb25f7458aaaf07e13ed994d954ff6c655"}, "config": {"enabled": true, "alias": "Al_T_Dim_Company", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["IdCompany"], "business_start_date": "parse_timestamp(\"%Y%M%d\", CAST(DateCompanyStart AS STRING))", "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "tags": [], "description": "Tabla de silver", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\dim_empresas\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Dim_Company", "unique_keys": ["IdCompany"], "business_start_date": "parse_timestamp(\"%Y%M%d\", CAST(DateCompanyStart AS STRING))", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "created_at": 1761754836.7826643, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_Company`", "raw_code": "SELECT \n\nIdCompany,\nCompany,\nDateCompanyStart,\nDateCompanyEnd,\nCompanyCoreDesc, \nCompanyAddress, \nCompanyCityDesc, \nCompanyDistrict, \nCompanyProvince, \nCompanyProvinceDesc, \nCompanyCountry, \nCompanyCountryDesc, \nCompanyCIF, \nCompanyBillingCIF, \nCompanyPhone1, \nCompanyPhone2, \nCompanyFax, \nCompanyCurrency\n\nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_Company') }}\n\n{% if is_incremental() %}\n   WHERE modifdate >= {{ var(\"modif_date\", get_config_value_v4(\"modif_date\")) }}\n{% else %}\n  WHERE 1=1\n{% endif %}\nAND {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\nBETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_Company"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Company"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.dim_evolcoche": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "dim_evolcoche", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\dim_evolcoche\\dim_evolcoche.sql", "original_file_path": "models\\dim\\dim_evolcoche\\dim_evolcoche.sql", "unique_id": "model.dbt_common_gold.dim_evolcoche", "fqn": ["dbt_common_gold", "dim", "dim_evolcoche", "dim_evolcoche"], "alias": "Al_T_Dim_VehicleEvol", "checksum": {"name": "sha256", "checksum": "1332798db36f616c8bce709d804b176bb3d79e44af47c0af79ce8547d3e95d65"}, "config": {"enabled": true, "alias": "Al_T_Dim_VehicleEvol", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["IdCompany", "IdVehicle", "DateVehicleStart", "IdTypeOrigin"], "business_start_date": "COALESCE(safe.parse_timestamp(\"%Y%M%d\", CAST(DateVehicleStart AS STRING)), \"1900-1-1\")", "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "tags": [], "description": "Tabla de gold", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\dim_evolcoche\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Dim_VehicleEvol", "unique_keys": ["IdCompany", "IdVehicle", "DateVehicleStart", "IdTypeOrigin"], "business_start_date": "COALESCE(safe.parse_timestamp(\"%Y%M%d\", CAST(DateVehicleStart AS STRING)), \"1900-1-1\")", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "created_at": 1761754836.7846644, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_VehicleEvol`", "raw_code": "select \nIdZone,\nIdZu,\nIdDivision,\nIdCompany,\nIdVehicle,\nIdAxis,\nIdCg,\nIdTypeOrigin,\nDateVehicleStart,\nDateVehicleEnd,\nLicensePlate,\nClass,\nSystemPrincipal,\nSystemSecundary,\nSystemMonitoring,\nCam,\nCCTV,\nTachograph,\nGPS,\nABC,\nIdCompanyRenting,\nIdCompanyOwner,\nBatteryType,\nOwned\n\n\nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_VehicleEvol') }} \n\n\nWHERE {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\nBETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_VehicleEvol"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_VehicleEvol"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.dim_evolcochetaller": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "dim_evolcochetaller", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\dim_evolcochetaller\\dim_evolcochetaller.sql", "original_file_path": "models\\dim\\dim_evolcochetaller\\dim_evolcochetaller.sql", "unique_id": "model.dbt_common_gold.dim_evolcochetaller", "fqn": ["dbt_common_gold", "dim", "dim_evolcochetaller", "dim_evolcochetaller"], "alias": "Al_T_Dim_VehicleGarageEvol", "checksum": {"name": "sha256", "checksum": "14fd633a5c18e49e37bc5241ab893c0c3705b87ea61b35224bbe4c398da730f2"}, "config": {"enabled": true, "alias": "Al_T_Dim_VehicleGarageEvol", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["IdVehicle", "IdCompanyGarage", "DateRelationshipStart"], "business_start_date": "COALESCE(safe.parse_timestamp(\"%Y%M%d\", (CAST(DateRelationshipStart AS STRING))), \"1900-1-1\")", "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "tags": [], "description": "Tabla de gold", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\dim_evolcochetaller\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "enabled": true, "materialized": "incremental_alsa", "alias": "Al_T_Dim_VehicleGarageEvol", "unique_keys": ["IdVehicle", "IdCompanyGarage", "DateRelationshipStart"], "business_start_date": "COALESCE(safe.parse_timestamp(\"%Y%M%d\", (CAST(DateRelationshipStart AS STRING))), \"1900-1-1\")", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "created_at": 1761754836.7870905, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_VehicleGarageEvol`", "raw_code": "SELECT \nIdVehicle,\nIdCompanyGarage,\nIdDelegationGarage,\nDateRelationshipStart,\nDateRelationshipEnd,\nDescDelegationGarage\n\nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_VehicleGarageEvol') }} \n\n{% if is_incremental() %}\n   WHERE modifdate >= {{ var(\"modif_date\", get_config_value_v4(\"modif_date\")) }}\n{% else %}\n  WHERE 1=1\n{% endif %}\nAND {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\nBETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_VehicleGarageEvol"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_VehicleGarageEvol"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.dim_evolconductorempresa": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "dim_evolconductorempresa", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\dim_evolconductorempresa\\dim_evolconductorempresa.sql", "original_file_path": "models\\dim\\dim_evolconductorempresa\\dim_evolconductorempresa.sql", "unique_id": "model.dbt_common_gold.dim_evolconductorempresa", "fqn": ["dbt_common_gold", "dim", "dim_evolconductorempresa", "dim_evolconductorempresa"], "alias": "Al_T_Dim_DriverCompanyEvol", "checksum": {"name": "sha256", "checksum": "7594a26c59a7fa7b6bac19f7021668c2306cbe0882c3d6988c4b313252ebb0d8"}, "config": {"enabled": true, "alias": "Al_T_Dim_DriverCompanyEvol", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["IdDriver", "IdDriverCompany", "DateRelationshipStart"], "business_start_date": "COALESCE(safe.parse_timestamp(\"%Y%M%d\", (CAST(DateRelationshipStart AS STRING))), \"1900-1-1\")", "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "tags": [], "description": "Tabla de gold", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\dim_evolconductorempresa\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Dim_DriverCompanyEvol", "unique_keys": ["IdDriver", "IdDriverCompany", "DateRelationshipStart"], "business_start_date": "COALESCE(safe.parse_timestamp(\"%Y%M%d\", (CAST(DateRelationshipStart AS STRING))), \"1900-1-1\")", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "created_at": 1761754836.7881014, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_DriverCompanyEvol`", "raw_code": "select \nIdDriverCompanyLine,\nIdDriverCompany,\nIdDriver,\nDateRelationshipStart,\nDateRelationshipEnd\n\n\nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_DriverCompanyEvol') }} \n\n{% if is_incremental() %}\n   WHERE modifdate >= {{ var(\"modif_date\", get_config_value_v4(\"modif_date\")) }}\n{% else %}\n  WHERE 1=1\n{% endif %}\nAND {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\nBETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_DriverCompanyEvol"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_DriverCompanyEvol"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.dim_evolempresazona": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "dim_evolempresazona", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\dim_evolempresazona\\dim_evolempresazona.sql", "original_file_path": "models\\dim\\dim_evolempresazona\\dim_evolempresazona.sql", "unique_id": "model.dbt_common_gold.dim_evolempresazona", "fqn": ["dbt_common_gold", "dim", "dim_evolempresazona", "dim_evolempresazona"], "alias": "Al_T_Dim_CompanyZoneEvol", "checksum": {"name": "sha256", "checksum": "2f4ab175dcb4a3231dfa3ea6e096bd72f23b153717b270f47fd166c51249232d"}, "config": {"enabled": true, "alias": "Al_T_Dim_CompanyZoneEvol", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["IdCompany", "IdZone"], "business_start_date": "parse_timestamp(\"%Y%M%d\", CAST(DateRelationshipStart AS STRING))", "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "tags": [], "description": "Tabla de gold", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\dim_evolempresazona\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Dim_CompanyZoneEvol", "unique_keys": ["IdCompany", "IdZone"], "business_start_date": "parse_timestamp(\"%Y%M%d\", CAST(DateRelationshipStart AS STRING))", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "created_at": 1761754836.790092, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_CompanyZoneEvol`", "raw_code": "SELECT \nIdCompany,\nIdZone,\nIdCG,\nDateRelationshipStart,\nDateRelationshipEnd,\nIsIsoperimeter,\nIsoStartDate,\nIsoEndDate\n\nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_CompanyZoneEvol') }} \n\n{% if is_incremental() %}\n   WHERE modifdate >= {{ var(\"modif_date\", get_config_value_v4(\"modif_date\")) }}\n{% else %}\n  WHERE 1=1\n{% endif %}\nAND {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\nBETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_CompanyZoneEvol"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_CompanyZoneEvol"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.dim_evollinea": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "dim_evollinea", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\dim_evollinea\\dim_evollinea.sql", "original_file_path": "models\\dim\\dim_evollinea\\dim_evollinea.sql", "unique_id": "model.dbt_common_gold.dim_evollinea", "fqn": ["dbt_common_gold", "dim", "dim_evollinea", "dim_evollinea"], "alias": "Al_T_Dim_LineEvol", "checksum": {"name": "sha256", "checksum": "bc77c6bde1805cb4fdb24a9db144fad07911a1d316e5719ef2ecaf9b19e0fd84"}, "config": {"enabled": true, "alias": "Al_T_Dim_LineEvol", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["IdLine", "IdZoneLine", "IdCompany", "DateLineStart"], "business_start_date": "parse_timestamp(\"%Y%M%d\", CAST(DateLineStart AS STRING))", "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "tags": [], "description": "Tabla de gold EvolLinea", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\dim_evollinea\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "unique_keys": ["IdLine", "IdZoneLine", "IdCompany", "DateLineStart"], "materialized": "incremental_alsa", "alias": "Al_T_Dim_LineEvol", "business_start_date": "parse_timestamp(\"%Y%M%d\", CAST(DateLineStart AS STRING))", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "created_at": 1761754836.79208, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_LineEvol`", "raw_code": "SELECT\nIdZoneLine              as IdZoneLine,\nIdCompany               as IdCompany,\nIdLine                  as IdLine,\nDateLineStart           as DateLineStart,\nDateLineEnd             as DateLineEnd\n\n\nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_LineEvol') }}\n{% if is_incremental() %}\n   WHERE modifdate >= {{ var(\"modif_date\", get_config_value_v4(\"modif_date\")) }}\n{% else %}\n  WHERE 1=1\n{% endif %}\nAND {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\nBETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_LineEvol"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_LineEvol"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.dim_evollineaEO": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "dim_evollineaEO", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\dim_evollineaEO\\dim_evollineaEO.sql", "original_file_path": "models\\dim\\dim_evollineaEO\\dim_evollineaEO.sql", "unique_id": "model.dbt_common_gold.dim_evollineaEO", "fqn": ["dbt_common_gold", "dim", "dim_evollineaEO", "dim_evollineaEO"], "alias": "Al_T_Dim_LineEvolOS", "checksum": {"name": "sha256", "checksum": "0322bd2304d81728558a6a10beaa10214a5bb05176f4d46b8c7a1d9f52149e44"}, "config": {"enabled": true, "alias": "Al_T_Dim_LineEvolOS", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["IdLine", "IdZoneLine", "IdCompany", "DateLineStart", "DateLineStartEO"], "business_start_date": "parse_timestamp(\"%Y%M%d\", CAST(DateLineStart AS STRING))", "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "tags": [], "description": "Tabla de gold EvolLineaOS", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\dim_evollineaEO\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "unique_keys": ["IdLine", "IdZoneLine", "IdCompany", "DateLineStart", "DateLineStartEO"], "materialized": "incremental_alsa", "alias": "Al_T_Dim_LineEvolOS", "business_start_date": "parse_timestamp(\"%Y%M%d\", CAST(DateLineStart AS STRING))", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "created_at": 1761754836.7932065, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_LineEvolOS`", "raw_code": "SELECT\nIdZoneLine                      as IdZoneLine,\nIdCG                            as IdCG,\nIdZu                            as IdZu,\nIdDivision                      as IdDivision,\nIdCompany                       as IdCompany,\nIdLine                          as IdLine,\nDateLineStart                   as DateLineStart,\nDateLineEnd                     as DateLineEnd,\nIdAxis                          as IdAxis,\nDateLineStartEO                 as DateLineStartEO,\nDateLineEndEO                   as DateLineEndEO,\n\n\nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_LineEvolOS') }}\n{% if is_incremental() %}\n   WHERE modifdate >= {{ var(\"modif_date\", get_config_value_v4(\"modif_date\")) }}\n{% else %}\n  WHERE 1=1\n{% endif %}\nAND {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\nBETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_LineEvolOS"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_LineEvolOS"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.dim_expedicion": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "dim_expedicion", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\dim_expedicion\\dim_expedicion.sql", "original_file_path": "models\\dim\\dim_expedicion\\dim_expedicion.sql", "unique_id": "model.dbt_common_gold.dim_expedicion", "fqn": ["dbt_common_gold", "dim", "dim_expedicion", "dim_expedicion"], "alias": "Al_T_Dim_Expedition", "checksum": {"name": "sha256", "checksum": "5621e71eb26634092ad841e11795451c5211b3cf17a06fe811abbc6360cdedf7"}, "config": {"enabled": true, "alias": "Al_T_Dim_Expedition", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["IdCompany", "IdExpedition", "IdItinerary", "IdLine", "DateExpeditionStart"], "business_start_date": "TIMESTAMP('1900-01-01')", "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "tags": [], "description": "Tabla de gold Expedicion", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\dim_expedicion\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Dim_Expedition", "unique_keys": ["IdCompany", "IdExpedition", "IdItinerary", "IdLine", "DateExpeditionStart"], "business_start_date": "TIMESTAMP('1900-01-01')", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "created_at": 1761754836.7941997, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_Expedition`", "raw_code": "SELECT \nIdCompany,\nIdExpedition,\nIdItinerary,\nIdLine,\nDateExpeditionStart,\nDateExpeditionEnd,\nHourArrival,\nHourDeparture\n \n\nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_Expedition') }} \n\n{% if is_incremental() %}\n   WHERE modifdate >= {{ var(\"modif_date\", get_config_value_v4(\"modif_date\")) }}\n{% else %}\n  WHERE 1=1\n{% endif %}\nAND {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\nBETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_Expedition"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Expedition"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.dim_fechascierre": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "dim_fechascierre", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\dim_fechascierre\\dim_fechascierre.sql", "original_file_path": "models\\dim\\dim_fechascierre\\dim_fechascierre.sql", "unique_id": "model.dbt_common_gold.dim_fechascierre", "fqn": ["dbt_common_gold", "dim", "dim_fechascierre", "dim_fechascierre"], "alias": "Al_T_Dim_ClosingDates", "checksum": {"name": "sha256", "checksum": "1a3ffe343d9b9a9551fb58c8ad58255c1a46c494fd0d7f3f8ee0bee153818427"}, "config": {"enabled": true, "alias": "Al_T_Dim_ClosingDates", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["PeriodNumber", "IdReport"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "tags": [], "description": "Tabla de gold", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\dim_fechascierre\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Dim_ClosingDates", "unique_keys": ["PeriodNumber", "IdReport"], "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "created_at": 1761754836.7977257, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_ClosingDates`", "raw_code": "SELECT \n  COALESCE(T2.Period, T1.Period) AS Period,    \n  COALESCE(T2.PeriodNumber, T1.PeriodNumber) AS PeriodNumber,\n  COALESCE(T2.Year, T1.Year) AS Year,    \n  CASE \n    WHEN COALESCE(T2.MonthStartDate, T1.MonthStartDate) = 0 THEN 19000101 \n    ELSE COALESCE(T2.MonthStartDate, T1.MonthStartDate) \n  END AS MonthStartDate,    \n  CASE \n    WHEN COALESCE(T2.MonthEndDate, T1.MonthEndDate) = 0 THEN 19000131 \n    ELSE COALESCE(T2.MonthEndDate, T1.MonthEndDate) \n  END AS MonthEndDate, \n  COALESCE(T2.ClosingDate, T1.ClosingDate) AS ClosingDate,\n  COALESCE(T2.IdReport, T1.IdReport) AS IdReport\nFROM `prj-slv-dev-westeu-01.bq_com_dev_westeu_01.Al_T_Dim_ClosingDates` AS T1\nLEFT JOIN `prj-gld-dev-westeu-01.bq_com_test_westeu_01.Al_T_Dim_ClosingDates_Manual` AS T2\n  ON T1.PeriodNumber = T2.PeriodNumber AND T1.IdReport = T2.IdReport\n\nWHERE CURRENT_TIMESTAMP() \nBETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.dim_gc": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "dim_gc", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\dim_gc\\dim_gc.sql", "original_file_path": "models\\dim\\dim_gc\\dim_gc.sql", "unique_id": "model.dbt_common_gold.dim_gc", "fqn": ["dbt_common_gold", "dim", "dim_gc", "dim_gc"], "alias": "Al_T_Dim_ContractGroup", "checksum": {"name": "sha256", "checksum": "9fab44e262d6e861d55f4855b9286b314ecefa67224e91fa57cc9d4b99115295"}, "config": {"enabled": true, "alias": "Al_T_Dim_ContractGroup", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["IdCG"], "business_start_date": "COALESCE(safe.parse_timestamp(\"%Y%M%d\", (CAST(DateCgStart AS STRING))), \"1900-1-1\")", "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "tags": [], "description": "Tabla de Gold", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\dim_gc\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Dim_ContractGroup", "unique_keys": ["IdCG"], "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "business_start_date": "COALESCE(safe.parse_timestamp(\"%Y%M%d\", (CAST(DateCgStart AS STRING))), \"1900-1-1\")", "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "created_at": 1761754836.7997184, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_ContractGroup`", "raw_code": "SELECT \n  silver.IdCg,\n  silver.Cg,\n  silver.IdZu,\n  silver.DateCgStart,\n  silver.DateCgEnd,\n  silver.IdCommercialSpeed,\n  \n\nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_ContractGroup') }} AS silver\n\nWHERE {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\nBETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_ContractGroup"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_ContractGroup"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.dim_itinerario": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "dim_itinerario", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\dim_itinerario\\dim_itinerario.sql", "original_file_path": "models\\dim\\dim_itinerario\\dim_itinerario.sql", "unique_id": "model.dbt_common_gold.dim_itinerario", "fqn": ["dbt_common_gold", "dim", "dim_itinerario", "dim_itinerario"], "alias": "Al_T_Dim_Itinerary", "checksum": {"name": "sha256", "checksum": "a552d4afb3b8c48ba2d6f3bdede93ab5fedad1465992cb1c1b346691e7d468de"}, "config": {"enabled": true, "alias": "Al_T_Dim_Itinerary", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["IdCompany", "IdLine", "IdItinerary", "Direction", "DateItineraryStart"], "business_start_date": "TIMESTAMP('1900-01-01')", "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "tags": [], "description": "Tabla de silver Itinerario", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\dim_itinerario\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Dim_Itinerary", "unique_keys": ["IdCompany", "IdLine", "IdItinerary", "Direction", "DateItineraryStart"], "business_start_date": "TIMESTAMP('1900-01-01')", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "created_at": 1761754836.8017178, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_Itinerary`", "raw_code": "SELECT \nIdCompany,\nIdLine,\nIdItinerary,\nDirection,\nDescItinerary,\nDateItineraryStart,\nDateItineraryEnd\n \n\nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_Itinerary') }} \n\n{% if is_incremental() %}\n   WHERE modifdate >= {{ var(\"modif_date\", get_config_value_v4(\"modif_date\")) }}\n{% else %}\n  WHERE 1=1\n{% endif %}\nAND {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\nBETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_Itinerary"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Itinerary"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.dim_linea": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "dim_linea", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\dim_linea\\dim_linea.sql", "original_file_path": "models\\dim\\dim_linea\\dim_linea.sql", "unique_id": "model.dbt_common_gold.dim_linea", "fqn": ["dbt_common_gold", "dim", "dim_linea", "dim_linea"], "alias": "Al_T_Dim_Line", "checksum": {"name": "sha256", "checksum": "fb03ab97786e3a5a37377e10dae32158bd499c64f88e897c2de3a049c5260206"}, "config": {"enabled": true, "alias": "Al_T_Dim_Line", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["IdLine", "DateLineStart"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "tags": [], "description": "Tabla de silver", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\dim_linea\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "unique_keys": ["IdLine", "DateLineStart"], "materialized": "incremental_alsa", "alias": "Al_T_Dim_Line", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "created_at": 1761754836.8027003, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_Line`", "raw_code": "select distinct\nIdLine,\nLine,\nIdType,\nIdConce,\nIdConceOfi,\nIdDefTrans,\nDateLineStart, \nDateLineEnd\n\nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_Line') }} \n\n{% if is_incremental() %}\n   WHERE modifdate >= {{ var(\"modif_date\", get_config_value_v4(\"modif_date\")) }}\n{% else %}\n  WHERE 1=1\n{% endif %}\nAND {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\nBETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_Line"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Line"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.dim_marca": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "dim_marca", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\dim_marca\\dim_marca.sql", "original_file_path": "models\\dim\\dim_marca\\dim_marca.sql", "unique_id": "model.dbt_common_gold.dim_marca", "fqn": ["dbt_common_gold", "dim", "dim_marca", "dim_marca"], "alias": "Al_T_Dim_Brand", "checksum": {"name": "sha256", "checksum": "29758b67023363a5c74e01280d99ce0a485cd98234b67a9b2d833636047a912d"}, "config": {"enabled": true, "alias": "Al_T_Dim_Brand", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["IdBrand"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "tags": [], "description": "Tabla de gold", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\dim_marca\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Dim_Brand", "unique_keys": ["IdBrand"], "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "created_at": 1761754836.8037565, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_Brand`", "raw_code": "SELECT \nIdType,\nIdBrand,\nBrand\n\nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_Brand') }} \n\n{% if is_incremental() %}\n   WHERE modifdate >= {{ var(\"modif_date\", get_config_value_v4(\"modif_date\")) }}\n{% else %}\n  WHERE 1=1\n{% endif %}\nAND {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\nBETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_Brand"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Brand"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.dim_modelo": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "dim_modelo", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\dim_modelo\\dim_modelo.sql", "original_file_path": "models\\dim\\dim_modelo\\dim_modelo.sql", "unique_id": "model.dbt_common_gold.dim_modelo", "fqn": ["dbt_common_gold", "dim", "dim_modelo", "dim_modelo"], "alias": "Al_T_Dim_Model", "checksum": {"name": "sha256", "checksum": "fedfc96a4dd659660ed495a352eaa656994504dbf946734bcfb87a257f7305d3"}, "config": {"enabled": true, "alias": "Al_T_Dim_Model", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["IdModel"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "tags": [], "description": "Tabla de silver", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\dim_modelo\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Dim_Model", "unique_keys": ["IdModel"], "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "created_at": 1761754836.8062727, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_Model`", "raw_code": "SELECT \nIdType,\t\nIdModel,\t\nModel\n\nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_Model') }} \n\n{% if is_incremental() %}\n   WHERE modifdate >= {{ var(\"modif_date\", get_config_value_v4(\"modif_date\")) }}\n{% else %}\n  WHERE 1=1\n{% endif %}\nAND {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\nBETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_Model"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Model"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.dim_paradas": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "dim_paradas", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\dim_paradas\\dim_paradas.sql", "original_file_path": "models\\dim\\dim_paradas\\dim_paradas.sql", "unique_id": "model.dbt_common_gold.dim_paradas", "fqn": ["dbt_common_gold", "dim", "dim_paradas", "dim_paradas"], "alias": "Al_T_Dim_Stops", "checksum": {"name": "sha256", "checksum": "1148a2271eb8871fdd0f214a7d3d7ade0b7166a8d7c580fcc7875b3a62729089"}, "config": {"enabled": true, "alias": "Al_T_Dim_Stops", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["IdTown", "IdStop"], "business_start_date": "TIMESTAMP('1900-01-01')", "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "tags": [], "description": "Tabla de gold paradas", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\dim_paradas\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Dim_Stops", "unique_keys": ["IdTown", "IdStop"], "business_start_date": "TIMESTAMP('1900-01-01')", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "created_at": 1761754836.8072827, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_Stops`", "raw_code": "SELECT \n  IdTown,\n  IdStop,\n  Town ,\n  Stop ,\n  IdProvince ,\n  Latitude ,\n  Longitude ,\n  Direction,\n  Type  ,\n  DateStopStart,\n  DateStopEnd\n\n  \nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_Stops') }} \n\n{% if is_incremental() %}\n   WHERE modifdate >= {{ var(\"modif_date\", get_config_value_v4(\"modif_date\")) }}\n{% else %}\n  WHERE 1=1\n{% endif %}\nAND {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\nBETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_Stops"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Stops"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.dim_pueblo": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "dim_pueblo", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\dim_pueblo\\dim_pueblo.sql", "original_file_path": "models\\dim\\dim_pueblo\\dim_pueblo.sql", "unique_id": "model.dbt_common_gold.dim_pueblo", "fqn": ["dbt_common_gold", "dim", "dim_pueblo", "dim_pueblo"], "alias": "Al_T_Dim_Town", "checksum": {"name": "sha256", "checksum": "9c86f52bfc6c7bf69445b619ea3d62e6f0cd4392e0054a6f5e26902f001426ab"}, "config": {"enabled": true, "alias": "Al_T_Dim_Town", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["IdTown"], "business_start_date": "TIMESTAMP('1900-01-01')", "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "tags": [], "description": "Tabla de gold Pueblo", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\dim_pueblo\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Dim_Town", "unique_keys": ["IdTown"], "business_start_date": "TIMESTAMP('1900-01-01')", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "created_at": 1761754836.8082786, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_Town`", "raw_code": "SELECT \n  IdTown,\n  Town,\n  IdProvince,\n  IdDistrict,\n  IdCountry,\n  Latitude,\n  Longitude\n\n  \nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_Town') }} \n\n{% if is_incremental() %}\n   WHERE modifdate >= {{ var(\"modif_date\", get_config_value_v4(\"modif_date\")) }}\n{% else %}\n  WHERE 1=1\n{% endif %}\nAND {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\nBETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_Town"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Town"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.dim_servicio": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "dim_servicio", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\dim_servicio\\dim_servicio.sql", "original_file_path": "models\\dim\\dim_servicio\\dim_servicio.sql", "unique_id": "model.dbt_common_gold.dim_servicio", "fqn": ["dbt_common_gold", "dim", "dim_servicio", "dim_servicio"], "alias": "Al_T_Dim_ServiceType", "checksum": {"name": "sha256", "checksum": "30f3bbd2093620ad3372673586878b3f9df316177ba4445fe4a3ab16cd2cbcbc"}, "config": {"enabled": true, "alias": "Al_T_Dim_ServiceType", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["IdServiceType"], "business_start_date": "CURRENT_TIMESTAMP()", "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "tags": [], "description": "Tabla de gold Servicio", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\dim_servicio\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Dim_ServiceType", "unique_keys": ["IdServiceType"], "business_start_date": "CURRENT_TIMESTAMP()", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "created_at": 1761754836.8102758, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_ServiceType`", "raw_code": "SELECT \nIdServiceType,\nServiceType,\nDateServiceTypeStart,\nDateServiceTypeEnd\n \n\nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_ServiceType') }} \n\n{% if is_incremental() %}\n   WHERE modifdate >= {{ var(\"modif_date\", get_config_value_v4(\"modif_date\")) }}\n{% else %}\n  WHERE 1=1\n{% endif %}\nAND {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\nBETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_ServiceType"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_ServiceType"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.dim_subsituacion": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "dim_subsituacion", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\dim_subsituacion\\dim_subsituacion.sql", "original_file_path": "models\\dim\\dim_subsituacion\\dim_subsituacion.sql", "unique_id": "model.dbt_common_gold.dim_subsituacion", "fqn": ["dbt_common_gold", "dim", "dim_subsituacion", "dim_subsituacion"], "alias": "Al_T_Dim_ServiceSubType", "checksum": {"name": "sha256", "checksum": "23603f26c2ca67246aef0751025081715358e664d9b1db35eeaf4e429e7170d0"}, "config": {"enabled": true, "alias": "Al_T_Dim_ServiceSubType", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["IdServiceType", "IdServiceSubType"], "business_start_date": "TIMESTAMP('1900-01-01')", "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "tags": [], "description": "Tabla de gold Subsituacion", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\dim_subsituacion\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Dim_ServiceSubType", "unique_keys": ["IdServiceType", "IdServiceSubType"], "business_start_date": "TIMESTAMP('1900-01-01')", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "created_at": 1761754836.8131163, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_ServiceSubType`", "raw_code": "SELECT \n  IdServiceType,\n  IdServiceSubType,\n  ServiceSubType,\n  DateServiceSubTypeStart,\n  DateServiceSubTypeEnd\n\n  \nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_ServiceSubType') }} \n\n{% if is_incremental() %}\n   WHERE modifdate >= {{ var(\"modif_date\", get_config_value_v4(\"modif_date\")) }}\n{% else %}\n  WHERE 1=1\n{% endif %}\nAND {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\nBETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_ServiceSubType"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_ServiceSubType"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.dim_tipotransporte": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "dim_tipotransporte", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\dim_tipotransporte\\dim_tipotransporte.sql", "original_file_path": "models\\dim\\dim_tipotransporte\\dim_tipotransporte.sql", "unique_id": "model.dbt_common_gold.dim_tipotransporte", "fqn": ["dbt_common_gold", "dim", "dim_tipotransporte", "dim_tipotransporte"], "alias": "Al_T_Dim_TypeTrans", "checksum": {"name": "sha256", "checksum": "a69654bc3522e3c62b6bc7bcc2800b3dd978ca8ca55d4933447a763c0098b524"}, "config": {"enabled": true, "alias": "Al_T_Dim_TypeTrans", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["IdTypeTransport"], "business_start_date": "TIMESTAMP('1900-01-01')", "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "tags": [], "description": "Tabla de gold tipotransporte", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\dim_tipotransporte\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Dim_TypeTrans", "unique_keys": ["IdTypeTransport"], "business_start_date": "TIMESTAMP('1900-01-01')", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "created_at": 1761754836.8142624, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_TypeTrans`", "raw_code": "SELECT \nIdTypeTransport,\nDescTypeTransport\n \n\nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_TypeTrans') }} \n\n{% if is_incremental() %}\n   WHERE modifdate >= {{ var(\"modif_date\", get_config_value_v4(\"modif_date\")) }}\n{% else %}\n  WHERE 1=1\n{% endif %}\nAND {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\nBETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_TypeTrans"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_TypeTrans"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.dim_uz": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "dim_uz", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\dim_uz\\dim_uz.sql", "original_file_path": "models\\dim\\dim_uz\\dim_uz.sql", "unique_id": "model.dbt_common_gold.dim_uz", "fqn": ["dbt_common_gold", "dim", "dim_uz", "dim_uz"], "alias": "Al_T_Dim_ZonalUnit", "checksum": {"name": "sha256", "checksum": "61b1fac0f35398bac30ba4531a4bf83d9c80729d3ba5f41ed72876fe7edf5fe6"}, "config": {"enabled": true, "alias": "Al_T_Dim_ZonalUnit", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["IdZu"], "business_start_date": "parse_timestamp(\"%Y%M%d\", CAST(DateZuStart AS STRING))", "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "tags": [], "description": "Tabla de gold", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\dim_uz\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Dim_ZonalUnit", "unique_keys": ["IdZu"], "business_start_date": "parse_timestamp(\"%Y%M%d\", CAST(DateZuStart AS STRING))", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "created_at": 1761754836.8157718, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_ZonalUnit`", "raw_code": "SELECT \nIdZu,\nZu,\nIdDivision,\nDateZuStart,\nDateZuEnd\n\nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_ZonalUnit') }}\nWHERE {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\nBETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_ZonalUnit"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_ZonalUnit"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.dim_zonas": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "dim_zonas", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\dim_zonas\\dim_zonas.sql", "original_file_path": "models\\dim\\dim_zonas\\dim_zonas.sql", "unique_id": "model.dbt_common_gold.dim_zonas", "fqn": ["dbt_common_gold", "dim", "dim_zonas", "dim_zonas"], "alias": "Al_T_Dim_Zone", "checksum": {"name": "sha256", "checksum": "8410b583f08b3a0da777cbd5b48a515b95724e1ab68a8c964219c0f29d786bac"}, "config": {"enabled": true, "alias": "Al_T_Dim_Zone", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["IdZone"], "business_start_date": "parse_timestamp(\"%Y%M%d\", CAST(DateZoneStart AS STRING))", "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "tags": [], "description": "Tabla de Gold", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\dim_zonas\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Dim_Zone", "unique_keys": ["IdZone"], "business_start_date": "parse_timestamp(\"%Y%M%d\", CAST(DateZoneStart AS STRING))", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target"}}, "created_at": 1761754836.817791, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_Zone`", "raw_code": "SELECT \nIdZone,\nZone,\nDateZoneStart,\nDateZoneEnd\n\nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_Zone') }} \n{% if is_incremental() %}\n   WHERE modifdate >= {{ var(\"modif_date\", get_config_value_v4(\"modif_date\")) }}\n{% else %}\n  WHERE 1=1\n{% endif %}\nAND {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\nBETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_Zone"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Zone"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.Al_T_Fact_CompetitorsPricing": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "Al_T_Fact_CompetitorsPricing", "resource_type": "model", "package_name": "dbt_common_gold", "path": "fact\\Al_T_Fact_CompetitorsPricing\\Al_T_Fact_CompetitorsPricing.sql", "original_file_path": "models\\fact\\Al_T_Fact_CompetitorsPricing\\Al_T_Fact_CompetitorsPricing.sql", "unique_id": "model.dbt_common_gold.Al_T_Fact_CompetitorsPricing", "fqn": ["dbt_common_gold", "fact", "Al_T_Fact_CompetitorsPricing", "Al_T_Fact_CompetitorsPricing"], "alias": "Al_T_Fact_CompetitorsPricing", "checksum": {"name": "sha256", "checksum": "d7de82e286b1c2df3f00a6e0fe3c1690e5fe5f75e1f4ec22de793001eb729325"}, "config": {"enabled": true, "alias": "Al_T_Fact_CompetitorsPricing", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["AlsaCaptureDate", "ProcessDate", "IntelligentID", "Price", "Rate", "TravelDate", "Company", "Type", "ServiceID", "Origin", "Destination", "CaptureDate", "Duration", "TravelTime", "DepartureTime", "ArrivalTime", "RateID", "RateName", "SubRateID", "SubRateName", "RouteID", "GroupName", "DepartureSlot", "BookingAnticipationDays", "TravelDayOfWeek", "OriginStation", "DestinationStation", "Observations", "Availability", "ExecutionDate", "InfoDateFrom", "InfoDateTo"], "business_start_date": "CURRENT_TIMESTAMP()", "modif_date": "DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true}, "tags": [], "description": "Tabla de gold Precios Competencia", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\fact\\Al_T_Fact_CompetitorsPricing\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Fact_CompetitorsPricing", "unique_keys": ["AlsaCaptureDate", "ProcessDate", "IntelligentID", "Price", "Rate", "TravelDate", "Company", "Type", "ServiceID", "Origin", "Destination", "CaptureDate", "Duration", "TravelTime", "DepartureTime", "ArrivalTime", "RateID", "RateName", "SubRateID", "SubRateName", "RouteID", "GroupName", "DepartureSlot", "BookingAnticipationDays", "TravelDayOfWeek", "OriginStation", "DestinationStation", "Observations", "Availability", "ExecutionDate", "InfoDateFrom", "InfoDateTo"], "business_start_date": "CURRENT_TIMESTAMP()", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true}, "created_at": 1761754836.8285694, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Fact_CompetitorsPricing`", "raw_code": "SELECT\n  AlsaCaptureDate,\n  ProcessDate,\n  IntelligentID,\n  Price,\n  Rate,\n  TravelDate,\n  Company,\n  Type,\n  ServiceID,\n  Origin,\n  Destination,\n  CaptureDate,\n  Duration,\n  TravelTime,\n  DepartureTime,\n  ArrivalTime,\n  RateID,\n  RateName,\n  SubRateID,\n  SubRateName,\n  RouteID,\n  GroupName,\n  DepartureSlot,\n  BookingAnticipationDays,\n  TravelDayOfWeek,\n  OriginStation,\n  DestinationStation,\n  Observations,\n  Availability,\n  ExecutionDate,\n  InfoDateFrom,\n  InfoDateTo\nFROM {{ source('bq_dim_silver_com', 'Al_T_Fact_CompetitorsPricing') }}\nWHERE {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\n  BETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')\nAND DATE(modifdate) >= {{ var(\"modif_date\", get_config_value_v4(\"modif_date\")) }}", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Fact_CompetitorsPricing"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Fact_CompetitorsPricing"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.Al_T_Fact_PositionsControl": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "Al_T_Fact_PositionsControl", "resource_type": "model", "package_name": "dbt_common_gold", "path": "fact\\Al_T_Fact_PositionsControl\\Al_T_Fact_PositionsControl.sql", "original_file_path": "models\\fact\\Al_T_Fact_PositionsControl\\Al_T_Fact_PositionsControl.sql", "unique_id": "model.dbt_common_gold.Al_T_Fact_PositionsControl", "fqn": ["dbt_common_gold", "fact", "Al_T_Fact_PositionsControl", "Al_T_Fact_PositionsControl"], "alias": "Al_T_Fact_PositionsControl", "checksum": {"name": "sha256", "checksum": "d660095d8fbc8ee63edee36c53b053d95b13314e4e8a7f3a1a12160c885d454e"}, "config": {"enabled": true, "alias": "Al_T_Fact_PositionsControl", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["ModifDate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["DateHour", "IdSystem"], "modif_date": "TIMESTAMP_TRUNC(TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 7 DAY), DAY)", "filter_final_tb": "AND final.DateHour >= TIMESTAMP_TRUNC(TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 7 DAY), DAY)", "version_date": "CURRENT_TIMESTAMP()", "business_start_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target", "delete_clause": "DateHour >= TIMESTAMP_TRUNC(TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 7 DAY), DAY)"}}, "tags": [], "description": "Tabla Fact Control Posiciones Gold", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\fact\\Al_T_Fact_PositionsControl\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Fact_PositionsControl", "unique_keys": ["DateHour", "IdSystem"], "cluster_by": ["ModifDate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "TIMESTAMP_TRUNC(TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 7 DAY), DAY)", "filter_final_tb": "AND final.DateHour >= TIMESTAMP_TRUNC(TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 7 DAY), DAY)", "version_date": "CURRENT_TIMESTAMP()", "business_start_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target", "delete_clause": "DateHour >= TIMESTAMP_TRUNC(TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 7 DAY), DAY)"}}, "created_at": 1761754836.8305712, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Fact_PositionsControl`", "raw_code": "SELECT\nCOALESCE(ora.DateHour, gcp.DateHour)       AS DateHour,\nCOALESCE(ora.IdSystem, gcp.IdSystem)       AS IdSystem,\nobt.Description                            AS DescSystem,\nora.TotalPositions                         AS TotalPositionsORA,\ngcp.TotalPositions                         AS TotalPositionsGCP,\n\n\n \nFROM {{ source('bq_fact_silver_com', 'Al_T_Agg_PositionsControlORA') }} ora\n\nFULL JOIN {{ source('bq_fact_silver_com', 'Al_T_Agg_PositionsControlGCP') }} gcp\nON ora.DateHour = gcp.DateHour and ora.IdSystem = gcp.IdSystem\nAND {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }} BETWEEN gcp.ValidStartDate AND COALESCE(gcp.ValidEndDate, '3000-1-1')\n\nLEFT JOIN {{ source('bq_fact_silver_com', 'Al_T_Dim_Systems') }} obt\nON IdExplot = COALESCE(ora.IdSystem, gcp.IdSystem)\nAND {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }} BETWEEN obt.ValidStartDate AND COALESCE(obt.ValidEndDate, '3000-1-1')\n\n/* Historic Condition */\nWHERE {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }} BETWEEN ora.ValidStartDate AND COALESCE(ora.ValidEndDate, '3000-1-1')\n\n/* TO FULL-REFRESH COMMENT THIS PART AND DELETE_WHERE_CLAUSE IN SCHEMA */\nAND COALESCE(ora.DateHour, gcp.DateHour)   >= {{ var(\"modif_date\", get_config_value_v4(\"modif_date\")) }}", "language": "sql", "refs": [], "sources": [["bq_fact_silver_com", "Al_T_Agg_PositionsControlORA"], ["bq_fact_silver_com", "Al_T_Agg_PositionsControlGCP"], ["bq_fact_silver_com", "Al_T_Dim_Systems"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_common_gold.bq_fact_silver_com.Al_T_Agg_PositionsControlORA", "source.dbt_common_gold.bq_fact_silver_com.Al_T_Agg_PositionsControlGCP", "source.dbt_common_gold.bq_fact_silver_com.Al_T_Dim_Systems"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.Al_T_Fact_Sales": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "Al_T_Fact_Sales", "resource_type": "model", "package_name": "dbt_common_gold", "path": "fact\\Al_T_Fact_Sales\\Al_T_Fact_Sales.sql", "original_file_path": "models\\fact\\Al_T_Fact_Sales\\Al_T_Fact_Sales.sql", "unique_id": "model.dbt_common_gold.Al_T_Fact_Sales", "fqn": ["dbt_common_gold", "fact", "Al_T_Fact_Sales", "Al_T_Fact_Sales"], "alias": "Al_T_Fact_Sales", "checksum": {"name": "sha256", "checksum": "1cabf4ddaba24e1a7825e2ebcd531ca0238d20b5f13f52a04a1af59cc4424411"}, "config": {"enabled": true, "alias": "Al_T_Fact_Sales", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["OnlyHint", "DocumentNumber", "OriginCode", "OriginName", "DestinationCode", "DestinationName", "VACode", "LineCode", "LineName", "TripID", "BusNumber", "LineCategory", "GroupedChannel", "SaleDate", "TravelDate", "DepartureHour", "StopDate", "StopHour", "PromotionCode", "PromotionName", "DiscountCode", "DiscountName", "IsCancelledFlag", "TicketAmountNetVAT", "ClasPassAmountNetVAT", "DigitalPassAmountNetVAT", "Passengers", "ClasPassPassengers", "DigitalPassPassengers", "InfoDateFrom", "InfoDateTo"], "business_start_date": "CURRENT_TIMESTAMP()", "modif_date": "DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true}, "tags": [], "description": "Tabla de gold Ventas", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\fact\\Al_T_Fact_Sales\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Fact_Sales", "unique_keys": ["OnlyHint", "DocumentNumber", "OriginCode", "OriginName", "DestinationCode", "DestinationName", "VACode", "LineCode", "LineName", "TripID", "BusNumber", "LineCategory", "GroupedChannel", "SaleDate", "TravelDate", "DepartureHour", "StopDate", "StopHour", "PromotionCode", "PromotionName", "DiscountCode", "DiscountName", "IsCancelledFlag", "TicketAmountNetVAT", "ClasPassAmountNetVAT", "DigitalPassAmountNetVAT", "Passengers", "ClasPassPassengers", "DigitalPassPassengers", "InfoDateFrom", "InfoDateTo"], "business_start_date": "CURRENT_TIMESTAMP()", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true}, "created_at": 1761754836.8360765, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Fact_Sales`", "raw_code": "SELECT\n  OnlyHint,\n  DocumentNumber,\n  OriginCode,\n  OriginName,\n  DestinationCode,\n  DestinationName,\n  VACode,\n  LineCode,\n  LineName,\n  TripID,\n  BusNumber,\n  LineCategory,\n  GroupedChannel,\n  SaleDate,\n  TravelDate,\n  DepartureHour,\n  StopDate,\n  StopHour,\n  PromotionCode,\n  PromotionName,\n  DiscountCode,\n  DiscountName,\n  IsCancelledFlag,\n  TicketAmountNetVAT,\n  ClasPassAmountNetVAT,\n  DigitalPassAmountNetVAT,\n  Passengers,\n  ClasPassPassengers,\n  DigitalPassPassengers,\n  InfoDateFrom,\n  InfoDateTo\nFROM {{ source('bq_dim_silver_com', 'Al_T_Fact_Sales') }}\nWHERE {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\n  BETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')\nAND DATE(modifdate) >= {{ var(\"modif_date\", get_config_value_v4(\"modif_date\")) }}", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Fact_Sales"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Fact_Sales"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.Al_T_Fact_SalesSearches": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "Al_T_Fact_SalesSearches", "resource_type": "model", "package_name": "dbt_common_gold", "path": "fact\\Al_T_Fact_SalesSearches\\Al_T_Fact_SalesSearches.sql", "original_file_path": "models\\fact\\Al_T_Fact_SalesSearches\\Al_T_Fact_SalesSearches.sql", "unique_id": "model.dbt_common_gold.Al_T_Fact_SalesSearches", "fqn": ["dbt_common_gold", "fact", "Al_T_Fact_SalesSearches", "Al_T_Fact_SalesSearches"], "alias": "Al_T_Fact_SalesSearches", "checksum": {"name": "sha256", "checksum": "373f7707adca6e2f680d6c9ec4f0c6730c6a4234a150a3b4eed2baeb7a86fb86"}, "config": {"enabled": true, "alias": "Al_T_Fact_SalesSearches", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["TravelMonthDate", "IdJourney"], "business_start_column": "CURRENT_TIMESTAMP()", "version_date": "CURRENT_TIMESTAMP()", "historic": true}, "tags": [], "description": "Tabla Fact Gold Ventas B\u00fasquedas Trayectos", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\fact\\Al_T_Fact_SalesSearches\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Fact_SalesSearches", "unique_keys": ["TravelMonthDate", "IdJourney"], "business_start_column": "CURRENT_TIMESTAMP()", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "version_date": "CURRENT_TIMESTAMP()", "historic": true}, "created_at": 1761754836.837165, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Fact_SalesSearches`", "raw_code": "WITH AggSales AS (\n  SELECT\n    TravelMonthDate,\n    IdJourney,\n    SUM(COALESCE(Passengers, 0)) AS TotalPassengers\n  FROM {{ source('bq_fact_silver_com', 'Al_T_Fact_JourneySales') }}\n  WHERE {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }} \n    BETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')\n  AND TravelMonthDate = SAFE_CAST(FORMAT_DATE('%Y%m', CURRENT_DATE()-1) AS INT64)\n  GROUP BY ALL\n)\n, UpdSales AS(\n  SELECT\n    TravelMonthDate,\n    IdJourney,\n    TotalPassengers\n  FROM AggSales\n)\n, RouteJourneys AS(\n  SELECT DISTINCT\n    IdJourney,\n    IdRoute,\n    Distance\n  FROM {{ ref( \"Al_T_Dim_RouteJourneys\") }}\n  WHERE {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\n    BETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')\n)\n, JourneySearches AS(\n  SELECT TravelMonthDate, IdJourney, COALESCE(WebSearches, 0) AS WebSearches\n  FROM {{ source('bq_fact_silver_com', 'Al_T_Fact_JourneySearches') }}\n  WHERE CURRENT_TIMESTAMP()\n    BETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')\n)\nSELECT\n  COALESCE(S.TravelMonthDate, SAFE_CAST(FORMAT_DATE('%Y%m', CURRENT_DATE()-1) AS INT64)) AS TravelMonthDate,\n  RJ.IdJourney,\n  RJ.IdRoute,\n  RJ.Distance,\n  COALESCE(S.TotalPassengers, 0) AS TotalPassengers,\n  SUM(COALESCE(WebSearches, 0)) AS TotalOnlineSearches,\nFROM RouteJourneys RJ\nLEFT JOIN UpdSales S\n    ON S.IdJourney = RJ.IdJourney\nLEFT JOIN JourneySearches B\n  ON S.TravelMonthDate = B.TravelMonthDate AND S.IdJourney = B.IdJourney\nGROUP BY ALL", "language": "sql", "refs": [{"name": "Al_T_Dim_RouteJourneys", "package": null, "version": null}], "sources": [["bq_fact_silver_com", "Al_T_Fact_JourneySales"], ["bq_fact_silver_com", "Al_T_Fact_JourneySearches"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_common_gold.bq_fact_silver_com.Al_T_Fact_JourneySales", "source.dbt_common_gold.bq_fact_silver_com.Al_T_Fact_JourneySearches", "model.dbt_common_gold.Al_T_Dim_RouteJourneys"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.Al_T_Fact_ServiceActivity_PW": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "Al_T_Fact_ServiceActivity_PW", "resource_type": "model", "package_name": "dbt_common_gold", "path": "fact\\Al_T_Fact_ServiceActivity_PW\\Al_T_Fact_ServiceActivity_PW.sql", "original_file_path": "models\\fact\\Al_T_Fact_ServiceActivity_PW\\Al_T_Fact_ServiceActivity_PW.sql", "unique_id": "model.dbt_common_gold.Al_T_Fact_ServiceActivity_PW", "fqn": ["dbt_common_gold", "fact", "Al_T_Fact_ServiceActivity_PW", "Al_T_Fact_ServiceActivity_PW"], "alias": "Al_T_Fact_ServiceActivity_PW", "checksum": {"name": "sha256", "checksum": "9db2bf1b879f7f8a58b6d583d4ca459ec7b4ef461b013b3daa4773a651c591a8"}, "config": {"enabled": true, "alias": "Al_T_Fact_ServiceActivity_PW", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["DateTravel_PARTITION", "validStartDate", "ValidEndDate", "DeleteDate"], "partition_by": {"field": "DateTravel_PARTITION", "data_type": "timestamp", "granularity": "day"}, "unique_keys": ["HashedKey"], "modif_date": "TIMESTAMP_TRUNC(TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 12 DAY), DAY)", "filter_final_tb": "AND final.DateTravel_PARTITION >= TIMESTAMP_TRUNC(TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 12 DAY), DAY)", "version_date": "CURRENT_TIMESTAMP()", "business_start_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target", "delete_clause": "DateTravel_PARTITION >= TIMESTAMP_TRUNC(TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 12 DAY), DAY)"}}, "tags": [], "description": "Tabla Fact Silver", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\fact\\Al_T_Fact_ServiceActivity_PW\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "alias": "Al_T_Fact_ServiceActivity_PW", "materialized": "incremental_alsa", "unique_keys": ["HashedKey"], "cluster_by": ["DateTravel_PARTITION", "validStartDate", "ValidEndDate", "DeleteDate"], "partition_by": {"field": "DateTravel_PARTITION", "data_type": "timestamp", "granularity": "day"}, "modif_date": "TIMESTAMP_TRUNC(TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 12 DAY), DAY)", "filter_final_tb": "AND final.DateTravel_PARTITION >= TIMESTAMP_TRUNC(TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 12 DAY), DAY)", "version_date": "CURRENT_TIMESTAMP()", "business_start_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "target", "delete_clause": "DateTravel_PARTITION >= TIMESTAMP_TRUNC(TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 12 DAY), DAY)"}}, "created_at": 1761754836.8402474, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Fact_ServiceActivity_PW`", "raw_code": "SELECT \n    DateTravel_PARTITION,\n    HashedKey,\n    IdService,\n    IdExpedition,\n    IdItinerary,\n    FlgDrivingWork,\n    FlgOwnVehicle,\n    FlgThirdPartyVehicle,\n    FlgOverLap,\n    SubSituation,\n    IdLine,\n    IdVehicleCompany,\n    IdDriverCompany,\n    IdVehicle,\n    LicensePlate,\n    IdDriver,\n    Year,\n    DateTravel,\n    DateDeparture,\n    NumKilometers,\n    OriginData,\n    FlgOwnService,\n    ReasonDesc,\n    ActivityDate\n\nFROM {{ source(\"bq_fact_silver_com\", \"Al_T_Fact_ServiceActivity_PW\") }}\n\n/*Hisotirc Condition*/\nWHERE {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\nBETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1') \n\n/*TO FULL-REFRESH COMMENT THIS PART AND DELETE_WHERE_CLAUSE IN SCHEMA*/\nand DateTravel_PARTITION >= {{ var(\"modif_date\", get_config_value_v4(\"modif_date\")) }}", "language": "sql", "refs": [], "sources": [["bq_fact_silver_com", "Al_T_Fact_ServiceActivity_PW"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_common_gold.bq_fact_silver_com.Al_T_Fact_ServiceActivity_PW"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.Al_T_Fact_TravelSuggestions": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "Al_T_Fact_TravelSuggestions", "resource_type": "model", "package_name": "dbt_common_gold", "path": "fact\\Al_T_Fact_TravelSuggestions\\Al_T_Fact_TravelSuggestions.sql", "original_file_path": "models\\fact\\Al_T_Fact_TravelSuggestions\\Al_T_Fact_TravelSuggestions.sql", "unique_id": "model.dbt_common_gold.Al_T_Fact_TravelSuggestions", "fqn": ["dbt_common_gold", "fact", "Al_T_Fact_TravelSuggestions", "Al_T_Fact_TravelSuggestions"], "alias": "Al_T_Fact_TravelSuggestions", "checksum": {"name": "sha256", "checksum": "c8b61736d7a685d43a3b48358051b4e322ed42ad3e9367108c7f97e705bd880a"}, "config": {"enabled": true, "alias": "Al_T_Fact_TravelSuggestions", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["TypeSuggestion", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["IdJourney", "IdLine", "TypeSuggestion", "MunicipalityNameSuggested"]}, "tags": [], "description": "Tabla de gold de sugerencias de Trayectos", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\fact\\Al_T_Fact_TravelSuggestions\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "enabled": true, "materialized": "table", "alias": "Al_T_Fact_TravelSuggestions", "unique_keys": ["IdJourney", "IdLine", "TypeSuggestion", "MunicipalityNameSuggested"], "cluster_by": ["TypeSuggestion", "validStartDate", "ValidEndDate", "DeleteDate"]}, "created_at": 1761754836.8422556, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Fact_TravelSuggestions`", "raw_code": "WITH RouteJourneys AS(\n  SELECT DISTINCT IdJourney, Journey, IdRoute, IdOrigin, OriginTown, IdDestination, DestinationTown, ValidStartDate, ValidEndDate\n  FROM {{ source('bq_dim_gld_com', 'Al_T_Dim_RouteJourneys') }}\n  WHERE CURRENT_TIMESTAMP() BETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')\n) \n, SalesSearches AS(\n  SELECT IdJourney, IdRoute, SUM(TotalPassengers) TotalPassengers, AVG(Distance) as Distance\n  FROM {{ source('bq_fact_gld_com', 'Al_T_Fact_SalesSearches') }}\n  WHERE CURRENT_TIMESTAMP() BETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')\n    AND PARSE_DATE('%Y%m', SAFE_CAST(TravelMonthDate AS STRING)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)\n  GROUP BY IdJourney, IdRoute\n)\n, DimLine AS(\n  SELECT IdLine, Line\n  FROM {{ source('bq_dim_gld_com', 'Al_T_Dim_Line') }}\n  WHERE CURRENT_TIMESTAMP() BETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')\n)\n, Lines AS(\n  SELECT IdOrigin AS IdOriginL, IdDestination AS IdDestinationL, IdLine\n  FROM {{ source('bq_dim_gld_com', 'Al_T_Dim_JourneyLines') }}\n  WHERE CURRENT_TIMESTAMP() BETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')\n)\n, TownAlias AS(\n  SELECT IdTown, Alias\n  FROM {{ source('bq_dim_gld_com', 'Al_T_Dim_TownAlias') }}\n  WHERE CURRENT_TIMESTAMP() BETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')\n)\n, AllTags AS(\n  SELECT TM.IdMunicipality, tow.IdTown, tow.AutCom,\n    CASE \n      WHEN TA.tag = 'HasRelevantFestivals' THEN 'Festival'\n      WHEN TA.tag = 'TouristScore' THEN 'Touristic'\n      WHEN TA.tag = 'HabitatType' THEN 'IsBigCity'\n      ELSE TA.tag\n    END AS Tag,\n    TM.TagValue\n  FROM {{ source('bq_fact_gld_gemini', 'Al_T_Fact_TaggedMunicipalities') }} tm\n  INNER JOIN {{ source('bq_dim_gld_gemini', 'Al_T_Dim_MunicipalityTags') }} ta\n    ON ta.IdMunicipalityTag = tm.IdTag\n    AND CURRENT_TIMESTAMP() BETWEEN TM.ValidStartDate AND COALESCE(TM.ValidEndDate, '3000-1-1')\n    AND CURRENT_TIMESTAMP() BETWEEN TA.ValidStartDate AND COALESCE(TA.ValidEndDate, '3000-1-1')\n    AND ( (tag, upper(tagvalue)) IN (\n      ('IsCoastal', upper('S\u00ed')),\n      ('HasRelevantFestivals',upper('S\u00ed')),\n      ('IsTouristDestination', upper('S\u00ed')),\n      ('IsProvinceCapital', upper('S\u00ed')),\n      ('HabitatType', upper('Grande'))\n    )\n      OR Tag = 'TouristScore' )\n  LEFT JOIN {{ source('bq_dim_gld_gemini', 'Al_T_Dim_MunicipalityTowns') }} tow\n    ON tm.IdMunicipality = tow.IdMunicipality\n  WHERE \n    (\n      CURRENT_TIMESTAMP() BETWEEN tow.ValidStartDate AND COALESCE(tow.ValidEndDate, '3000-1-1') OR\n      tow.IdMunicipality IS NULL\n    )\n) \n, TouristTag AS(\n  SELECT IdTown, Tag, TagValue AS TouristScore\n  FROM AllTags\n  WHERE Tag = 'Touristic' AND IdMunicipality IN(\n    SELECT IdMunicipality\n    FROM AllTags\n    WHERE Tag = 'IsTouristDestination'\n  )\n)\n,Main AS(\n  SELECT\n          -- Requested Journey\n          tr.IdJourney,\n          tr.Journey,\n\n          -- Origin\n          tr.IdOrigin           as IdOrigin,\n          twno.Country          as OriginCountry,\n          twno.AutCom           as OriginCA,\n          twno.Province         as OriginProvince,\n          twno.IdMunicipality   as IdOriginMunicipality,\n          twno.MunicipalityName as OriginMunicipalityName,\n          tr.OriginTown         as OriginTown,\n\n          -- Destination\n          tr.IdDestination      as IdDestination,\n          twnd.AutCom           as DestinationCA,\n          twnd.Province         as DestinationProvince,\n          twnd.IdMunicipality   as IdDestinationMunicipality,\n          twnd.MunicipalityName as MunicipalityDestination,\n          tr.DestinationTown    as DestinationTown,\n\n          -- Suggestion\n          trd.IdJourney         as IdJourneySuggested,\n          trd.Journey           as JourneySuggested,\n          twns.idtown           as IdDestinationTownSuggested,\n          twns.Country          as CountrySuggested,\n          twns.Province         as ProvinceSuggested,\n          twns.MunicipalityName as MunicipalityNameSuggested,\n          trd.DestinationTown   as DestinationTownSuggested,\n\n          sum(vb.TotalPassengers)   as TotalPassengers,\n          avg(vb.Distance)          as Distance,\n\n          tr.ValidStartDate,\n          tr.ValidEndDate\n          \n  FROM RouteJourneys tr\n  INNER JOIN RouteJourneys trd\n    ON tr.IdDestination = trd.IdOrigin\n  INNER JOIN SalesSearches vb\n    ON trd.IdJourney = vb.idJourney AND trd.IdRoute = vb.IdRoute --AND vb.Distance <= 250000\n  LEFT JOIN {{ source('bq_dim_gld_gemini', 'Al_T_Dim_MunicipalityTowns') }} twno\n    ON twno.idtown = tr.IdOrigin\n  LEFT JOIN {{ source('bq_dim_gld_gemini', 'Al_T_Dim_MunicipalityTowns') }} twnd\n    ON twnd.idtown = tr.IdDestination\n  LEFT JOIN {{ source('bq_dim_gld_gemini', 'Al_T_Dim_MunicipalityTowns') }} twns\n    ON twns.idtown = trd.idDestination\n\n  WHERE \n        (\n          CURRENT_TIMESTAMP() BETWEEN twno.ValidStartDate AND COALESCE(twno.ValidEndDate, '3000-1-1') OR\n          twno.idtown IS NULL\n        )\n    AND\n        (\n          CURRENT_TIMESTAMP() BETWEEN twnd.ValidStartDate AND COALESCE(twnd.ValidEndDate, '3000-1-1') OR\n          twnd.idtown IS NULL\n        )\n    AND\n        (\n          CURRENT_TIMESTAMP() BETWEEN twns.ValidStartDate AND COALESCE(twns.ValidEndDate, '3000-1-1') OR\n          twns.idtown IS NULL\n        )\n    AND (twns.idmunicipality) <> (twno.idmunicipality) AND (twns.idmunicipality) <> (twnd.idmunicipality)\n\n  GROUP BY \n        tr.IdJourney,\n        tr.Journey,\n        trd.IdJourney,\n        trd.Journey,\n        tr.OriginTown,\n        tr.IdOrigin,\n        tr.DestinationTown,\n        tr.IdDestination,\n        trd.DestinationTown,\n        twnd.AutCom,\n        twnd.Province,\n        twnd.IdMunicipality,\n        twnd.MunicipalityName,\n        twno.IdMunicipality,\n        twno.MunicipalityName,\n        twno.Country,\n        twno.AutCom,\n        twno.Province,\n        twns.idtown,\n        twns.Country,\n        twns.Province,\n        twns.MunicipalityName,\n        tr.ValidStartDate,\n        tr.ValidEndDate\n  \n  HAVING SUM(vb.TotalPassengers)>0\n  QUALIFY ROW_NUMBER() OVER (PARTITION BY tr.Journey, twns.MunicipalityName ORDER BY SUM(vb.TotalPassengers) DESC) = 1\n)\n\n, OriginMain AS(\n  SELECT\n          -- Requested Journey\n          tr.IdJourney,\n          tr.Journey,\n\n          -- Origin\n          tr.IdOrigin           as IdOrigin,\n          twno.Country          as OriginCountry,\n          twno.AutCom           as OriginCA,\n          twno.Province         as OriginProvince,\n          twno.IdMunicipality   as IdOriginMunicipality,\n          twno.MunicipalityName as OriginMunicipalityName,\n          tr.OriginTown         as OriginTown,\n\n          -- Destination\n          tr.IdDestination      as IdDestination,\n          twnd.AutCom           as DestinationCA,\n          twnd.Province         as DestinationProvince,\n          twnd.IdMunicipality   as IdDestinationMunicipality,\n          twnd.MunicipalityName as MunicipalityDestination,\n          tr.DestinationTown    as DestinationTown,\n\n          -- Suggestion\n          trd.IdJourney         as IdJourneySuggested,\n          trd.Journey           as JourneySuggested,\n          twns.idtown           as IdDestinationTownSuggested,\n          twns.Country          as CountrySuggested,\n          twns.Province         as ProvinceSuggested,\n          twns.MunicipalityName as MunicipalityNameSuggested,\n          trd.DestinationTown   as DestinationTownSuggested,\n\n          sum(vb.TotalPassengers)   as TotalPassengers,\n          avg(vb.Distance)          as Distance,\n\n          tr.ValidStartDate,\n          tr.ValidEndDate\n\n  FROM RouteJourneys tr\n  INNER JOIN RouteJourneys trd\n    ON tr.IdOrigin = trd.IdOrigin AND tr.IdDestination <> trd.IdDestination\n  INNER JOIN SalesSearches vb\n    ON trd.IdJourney = vb.idJourney AND trd.IdRoute = vb.IdRoute\n  LEFT JOIN {{ source('bq_dim_gld_gemini', 'Al_T_Dim_MunicipalityTowns') }} twno\n    ON twno.idtown = tr.IdOrigin\n  LEFT JOIN {{ source('bq_dim_gld_gemini', 'Al_T_Dim_MunicipalityTowns') }} twnd\n    ON twnd.idtown = tr.IdDestination\n  LEFT JOIN {{ source('bq_dim_gld_gemini', 'Al_T_Dim_MunicipalityTowns') }} twns\n    ON twns.idtown = trd.idDestination\n\n  WHERE \n        (\n          CURRENT_TIMESTAMP() BETWEEN twno.ValidStartDate AND COALESCE(twno.ValidEndDate, '3000-1-1') OR\n          twno.idtown IS NULL\n        )\n    AND\n        (\n          CURRENT_TIMESTAMP() BETWEEN twnd.ValidStartDate AND COALESCE(twnd.ValidEndDate, '3000-1-1') OR\n          twnd.idtown IS NULL\n        )\n    AND\n        (\n          CURRENT_TIMESTAMP() BETWEEN twns.ValidStartDate AND COALESCE(twns.ValidEndDate, '3000-1-1') OR\n          twns.idtown IS NULL\n        )\n    AND (twns.idmunicipality) <> (twno.idmunicipality) AND (twns.idmunicipality) <> (twnd.idmunicipality)\n\n  GROUP BY \n        tr.IdJourney,\n        tr.Journey,\n        trd.IdJourney,\n        trd.Journey,\n        tr.OriginTown,\n        tr.IdOrigin,\n        tr.DestinationTown,\n        tr.IdDestination,\n        trd.DestinationTown,\n        twnd.AutCom,\n        twnd.Province,\n        twnd.IdMunicipality,\n        twnd.MunicipalityName,\n        twno.IdMunicipality,\n        twno.MunicipalityName,\n        twno.Country,\n        twno.AutCom,\n        twno.Province,\n        twns.idtown,\n        twns.Country,\n        twns.Province,\n        twns.MunicipalityName,\n        tr.ValidStartDate,\n        tr.ValidEndDate\n  \n  HAVING SUM(vb.TotalPassengers)>0\n  QUALIFY ROW_NUMBER() OVER (PARTITION BY tr.Journey, twns.MunicipalityName ORDER BY SUM(vb.TotalPassengers) DESC, AVG(vb.Distance), twns.IdTown) = 1\n  ORDER BY 1\n)\n\n, OriginSug AS(\n  -- Origin Suggestions by Sales and Long Distance\n  SELECT \n    IdJourney, Journey, IdOrigin, OriginCountry, OriginCA, OriginProvince, IdOriginMunicipality, OriginMunicipalityName, OriginTown,\n    IdDestination, DestinationCA, DestinationProvince, IdDestinationMunicipality, MunicipalityDestination, DestinationTown, \n    IdJourneySuggested, JourneySuggested, IdDestinationTownSuggested, CountrySuggested, ProvinceSuggested, MunicipalityNameSuggested, DestinationTownSuggested,\n    'Origin - Sales' AS TypeSuggestion, CAST(NULL AS STRING) AS Tag, TotalPassengers, Distance, ValidStartDate, ValidEndDate\n  FROM OriginMain\n  GROUP BY ALL\n  QUALIFY ROW_NUMBER() OVER (PARTITION BY IdJourney ORDER BY TotalPassengers DESC, MunicipalityNameSuggested) <= 6\n)\n\n, DestShortDist AS(\n  -- Destination Suggestions by Sales and Short Distance\n  SELECT \n    IdJourney, Journey, IdOrigin, OriginCountry, OriginCA, OriginProvince, IdOriginMunicipality, OriginMunicipalityName, OriginTown,\n    IdDestination, DestinationCA, DestinationProvince, IdDestinationMunicipality, MunicipalityDestination, DestinationTown, \n    IdJourneySuggested, JourneySuggested, IdDestinationTownSuggested, CountrySuggested, ProvinceSuggested, MunicipalityNameSuggested, DestinationTownSuggested, \n    'Destination - Short Distance Sales' AS TypeSuggestion, CAST(NULL AS STRING) AS Tag, TotalPassengers, Distance, ValidStartDate, ValidEndDate\n  FROM Main m\n  WHERE Distance <= 150000\n  GROUP BY ALL\n  QUALIFY ROW_NUMBER() OVER (PARTITION BY IdJourney ORDER BY TotalPassengers DESC, MunicipalityNameSuggested) <= 6\n)\n\n, DestAnyDist AS(\n  -- Destination Suggestions by Sales and Long Distance\n  SELECT \n    IdJourney, Journey, IdOrigin, OriginCountry, OriginCA, OriginProvince, IdOriginMunicipality, OriginMunicipalityName, OriginTown,\n    IdDestination, DestinationCA, DestinationProvince, IdDestinationMunicipality, MunicipalityDestination, DestinationTown, \n    IdJourneySuggested, JourneySuggested, IdDestinationTownSuggested, CountrySuggested, ProvinceSuggested, MunicipalityNameSuggested, DestinationTownSuggested, \n    'Destination - Sales' AS TypeSuggestion, CAST(NULL AS STRING) AS Tag, TotalPassengers, Distance, ValidStartDate, ValidEndDate\n  FROM Main\n  GROUP BY ALL\n  QUALIFY ROW_NUMBER() OVER (PARTITION BY IdJourney ORDER BY TotalPassengers DESC, MunicipalityNameSuggested) <= 6\n)\n\n, DestTags AS(\n  -- Destination Suggestions by Tags\n  -- Coastal and Festivals\n  SELECT \n    IdJourney, Journey, IdOrigin, OriginCountry, OriginCA, OriginProvince, IdOriginMunicipality, OriginMunicipalityName, OriginTown,\n    IdDestination, DestinationCA, DestinationProvince, IdDestinationMunicipality, MunicipalityDestination, DestinationTown, \n    IdJourneySuggested, JourneySuggested, IdDestinationTownSuggested, CountrySuggested, ProvinceSuggested, MunicipalityNameSuggested, DestinationTownSuggested,\n    'Destination - Recommended destinations' AS TypeSuggestion, MAX(ta.Tag) AS Tag, TotalPassengers, Distance, ValidStartDate, ValidEndDate\n  FROM Main m\n  INNER JOIN AllTags ta\n    ON ta.idtown = m.IdDestinationTownSuggested AND Tag IN('IsCoastal', 'Festival') AND Distance <= 150000\n  GROUP BY ALL\n  QUALIFY ROW_NUMBER() OVER (PARTITION BY IdJourney ORDER BY TotalPassengers DESC, MunicipalityNameSuggested) <= 6\n\n  UNION ALL\n\n  SELECT \n    IdJourney, Journey, IdOrigin, OriginCountry, OriginCA, OriginProvince, IdOriginMunicipality, OriginMunicipalityName, OriginTown,\n    IdDestination, DestinationCA, DestinationProvince, IdDestinationMunicipality, MunicipalityDestination, DestinationTown, \n    IdJourneySuggested, JourneySuggested, IdDestinationTownSuggested, CountrySuggested, ProvinceSuggested, MunicipalityNameSuggested, DestinationTownSuggested, \n    'Destination - Recommended destinations' AS TypeSuggestion, ta.Tag AS Tag, TotalPassengers, Distance, ValidStartDate, ValidEndDate\n  FROM Main m\n  INNER JOIN TouristTag ta\n    ON ta.idtown = m.IdDestinationTownSuggested AND Distance <= 150000\n  GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28, ta.TouristScore\n  QUALIFY ROW_NUMBER() OVER (PARTITION BY IdJourney ORDER BY TouristScore DESC, TotalPassengers DESC, MunicipalityNameSuggested) <= 6\n)\n\n, AllSuggestions AS(\n  SELECT \n    IdJourney, Journey, IdOrigin, OriginCountry, OriginCA, OriginProvince, IdOriginMunicipality, OriginMunicipalityName, OriginTown,\n    IdDestination, DestinationCA, DestinationProvince, IdDestinationMunicipality, MunicipalityDestination, DestinationTown, \n    IdJourneySuggested, JourneySuggested, IdDestinationTownSuggested, CountrySuggested, ProvinceSuggested, MunicipalityNameSuggested, DestinationTownSuggested, \n      TypeSuggestion, Tag, TotalPassengers, Distance\n\n  FROM OriginSug\n\n  UNION ALL\n\n  SELECT \n    IdJourney, Journey, IdOrigin, OriginCountry, OriginCA, OriginProvince, IdOriginMunicipality, OriginMunicipalityName, OriginTown,\n    IdDestination, DestinationCA, DestinationProvince, IdDestinationMunicipality, MunicipalityDestination, DestinationTown, \n    IdJourneySuggested, JourneySuggested, IdDestinationTownSuggested, CountrySuggested, ProvinceSuggested, MunicipalityNameSuggested, DestinationTownSuggested, \n      TypeSuggestion, Tag, TotalPassengers, Distance\n\n  FROM DestShortDist\n\n  UNION ALL\n\n  SELECT \n    IdJourney, Journey, IdOrigin, OriginCountry, OriginCA, OriginProvince, IdOriginMunicipality, OriginMunicipalityName, OriginTown,\n    IdDestination, DestinationCA, DestinationProvince, IdDestinationMunicipality, MunicipalityDestination, DestinationTown, \n    IdJourneySuggested, JourneySuggested, IdDestinationTownSuggested, CountrySuggested, ProvinceSuggested, MunicipalityNameSuggested, DestinationTownSuggested, \n      TypeSuggestion, Tag, TotalPassengers, Distance\n\n  FROM DestAnyDist\n\n  UNION ALL\n  \n  SELECT \n    IdJourney, Journey, IdOrigin, OriginCountry, OriginCA, OriginProvince, IdOriginMunicipality, OriginMunicipalityName, OriginTown,\n    IdDestination, DestinationCA, DestinationProvince, IdDestinationMunicipality, MunicipalityDestination, DestinationTown, \n    IdJourneySuggested, JourneySuggested, IdDestinationTownSuggested, CountrySuggested, ProvinceSuggested, MunicipalityNameSuggested, DestinationTownSuggested, \n      TypeSuggestion, MAX(Tag) AS Tag, TotalPassengers, Distance\n\n  FROM DestTags\n  GROUP BY ALL\n  QUALIFY ROW_NUMBER() OVER (PARTITION BY IdJourney ORDER BY TotalPassengers DESC) <= 6\n)\nSELECT\n  CAST(Null AS STRING) as IdCluster,\n  IdJourney, Journey, L.IdLine, DL.Line, IdOrigin, OriginCountry, OriginCA, OriginProvince, OriginMunicipalityName, AO.Alias AS OriginAlias, OriginTown,\n  IdDestination, DestinationCA, DestinationProvince, MunicipalityDestination, AD.Alias AS DestinationAlias, DestinationTown, \n  IdJourneySuggested, JourneySuggested, IdDestinationTownSuggested, CountrySuggested, ProvinceSuggested, MunicipalityNameSuggested, DestinationTownSuggested, \n  TypeSuggestion, S.Tag, TotalPassengers, Distance,\n  CASE\n    WHEN S.OriginCA IN ('Galicia', 'Principado de Asturias', 'Cantabria', 'Pa\u00eds Vasco', 'Comunidad Foral de Navarra') THEN True\n    ELSE False\n  END AS OriginIsNorth,\n  CASE\n    WHEN OTC.IdTown IS NOT NULL THEN True\n    ELSE False\n  END AS OriginIsCoastal,\n  CASE\n    WHEN OTU.IdTown IS NOT NULL THEN True\n    ELSE False\n  END AS OriginIsUrban,\n  CASE\n    WHEN OTU.IdTown IS NULL THEN True\n    ELSE False\n  END AS OriginIsRural,\n  CASE\n    WHEN S.DestinationCA IN ('Galicia', 'Principado de Asturias', 'Cantabria', 'Pa\u00eds Vasco', 'Comunidad Foral de Navarra') THEN True\n    ELSE False\n  END AS DestinationIsNorth,\n  CASE\n    WHEN DTC.IdTown IS NOT NULL THEN True\n    ELSE False\n  END AS DestinationIsCoastal,\n  CASE\n    WHEN DTU.IdTown IS NOT NULL THEN True\n    ELSE False\n  END AS DestinationIsUrban,\n  CASE\n    WHEN DTU.IdTown IS NULL THEN True\n    ELSE False\n  END AS DestinationIsRural,\n\n  -- AUDITORIA\n  CAST(NULL AS STRING) as IdControl,\n  CAST(CURRENT_TIMESTAMP() AS TIMESTAMP) as CreateDate,\n  'DBT' as CreateUser,\n  CAST(CURRENT_TIMESTAMP() AS TIMESTAMP) as ModifDate,\n  'DBT' as ModifUser,\n  CAST(NULL AS TIMESTAMP) as DeleteDate,\n  CAST(NULL AS STRING) as DeleteUser,\n  \n  CAST(CURRENT_TIMESTAMP() AS TIMESTAMP) as ValidStartDate,\n  CAST(NULL AS TIMESTAMP) as ValidEndDate\n\nFROM AllSuggestions S\n\n-- Origin-Destination Lines\nLEFT JOIN Lines L\n  ON S.IdOrigin = L.IdOriginL AND S.IdDestination = L.IdDestinationL\nLEFT JOIN DimLine DL\n  ON DL.IdLine = L.IdLine\n-- Origin-Destination Alias\nLEFT JOIN TownAlias AO\n  ON AO.IdTown = S.IdOrigin\nLEFT JOIN TownAlias AD\n  ON AD.IdTown = S.IdDestination\n\n-- Origin Tags\nLEFT JOIN ( SELECT IdTown FROM AllTags WHERE Tag = 'IsCoastal' ) OTC\n  ON S.IdOrigin = OTC.IdTown\nLEFT JOIN ( SELECT DISTINCT IdTown FROM AllTags WHERE Tag IN ('IsProvinceCapital', 'IsBigCity') ) OTU\n  ON S.IdOrigin = OTU.IdTown\n\n-- Destination Tags\nLEFT JOIN ( SELECT IdTown FROM AllTags WHERE Tag = 'IsCoastal' ) DTC\n  ON S.IdDestination = DTC.IdTown\nLEFT JOIN ( SELECT DISTINCT IdTown FROM AllTags WHERE Tag IN ('IsProvinceCapital', 'IsBigCity') ) DTU\n  ON S.IdDestination = DTU.IdTown", "language": "sql", "refs": [], "sources": [["bq_dim_gld_com", "Al_T_Dim_RouteJourneys"], ["bq_dim_gld_gemini", "Al_T_Dim_MunicipalityTags"], ["bq_dim_gld_com", "Al_T_Dim_TownAlias"], ["bq_dim_gld_gemini", "Al_T_Dim_MunicipalityTowns"], ["bq_dim_gld_com", "Al_T_Dim_JourneyLines"], ["bq_dim_gld_com", "Al_T_Dim_Line"], ["bq_fact_gld_com", "Al_T_Fact_SalesSearches"], ["bq_fact_gld_gemini", "Al_T_Fact_TaggedMunicipalities"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_common_gold.bq_dim_gld_com.Al_T_Dim_RouteJourneys", "source.dbt_common_gold.bq_dim_gld_gemini.Al_T_Dim_MunicipalityTags", "source.dbt_common_gold.bq_dim_gld_com.Al_T_Dim_TownAlias", "source.dbt_common_gold.bq_dim_gld_gemini.Al_T_Dim_MunicipalityTowns", "source.dbt_common_gold.bq_dim_gld_com.Al_T_Dim_JourneyLines", "source.dbt_common_gold.bq_dim_gld_com.Al_T_Dim_Line", "source.dbt_common_gold.bq_fact_gld_com.Al_T_Fact_SalesSearches", "source.dbt_common_gold.bq_fact_gld_gemini.Al_T_Fact_TaggedMunicipalities"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.Al_T_Fact_TravelSuggestionsByTown": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "Al_T_Fact_TravelSuggestionsByTown", "resource_type": "model", "package_name": "dbt_common_gold", "path": "fact\\Al_T_Fact_TravelSuggestionsByTown\\Al_T_Fact_TravelSuggestionsByTown.sql", "original_file_path": "models\\fact\\Al_T_Fact_TravelSuggestionsByTown\\Al_T_Fact_TravelSuggestionsByTown.sql", "unique_id": "model.dbt_common_gold.Al_T_Fact_TravelSuggestionsByTown", "fqn": ["dbt_common_gold", "fact", "Al_T_Fact_TravelSuggestionsByTown", "Al_T_Fact_TravelSuggestionsByTown"], "alias": "Al_T_Fact_TravelSuggestionsByTown", "checksum": {"name": "sha256", "checksum": "4cd977e28318d22e7e820328257d7ca7f147a347e31b762fbf0f018eb5635e71"}, "config": {"enabled": true, "alias": "Al_T_Fact_TravelSuggestionsByTown", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["IdOrigin", "IdDestination"]}, "tags": [], "description": "Tabla de gold de sugerencias de Pueblos", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\fact\\Al_T_Fact_TravelSuggestionsByTown\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "enabled": true, "materialized": "table", "alias": "Al_T_Fact_TravelSuggestionsByTown", "unique_keys": ["IdOrigin", "IdDestination"], "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"]}, "created_at": 1761754836.8442554, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Fact_TravelSuggestionsByTown`", "raw_code": "WITH RouteJourneys AS(\n  SELECT DISTINCT IdJourney, IdOrigin, IdOriginAlias, IdDestination, IdDestinationAlias, Distance\n  FROM {{ ref( \"Al_T_Dim_RouteJourneys\") }}\n  WHERE CURRENT_TIMESTAMP() BETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')\n)\n, Validas AS(\n  SELECT IdOrigin, IdDestination, Url\n  FROM {{ ref( \"Al_T_Dim_RutasAlsaSEO\") }}\n  WHERE CURRENT_TIMESTAMP() BETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')\n)\n, tags AS (\nSELECT IdTown, MIN(TagOrder) AS TagOrder FROM(\n  SELECT mun.IdTown\n    ,CASE \n      WHEN dim.Tag='IsCoastal' THEN 1 \n      WHEN dim.Tag='HasRelevantFestivals' THEN 2\n      WHEN dim.Tag='IsTouristDestination' THEN 3\n      ELSE 0\n    END AS TagOrder\n  FROM {{ source('bq_dim_gld_gemini', 'Al_T_Dim_MunicipalityTowns') }} mun\n  INNER JOIN {{ source('bq_fact_gld_gemini', 'Al_T_Fact_TaggedMunicipalities') }} tag\n    ON mun.IdMunicipality=tag.IdMunicipality\n  INNER JOIN {{ source('bq_dim_gld_gemini', 'Al_T_Dim_MunicipalityTags') }} dim\n    ON dim.IdMunicipalityTag=tag.IdTag\n  WHERE dim.Tag IN(\n    'IsCoastal'\n    ,'HasRelevantFestivals'\n    ,'IsTouristDestination'\n  )\n    AND UPPER(tag.TagValue)='S\u00cd'\n    AND mun.ValidEndDate IS NULL \n    AND tag.ValidEndDate IS NULL \n    AND dim.ValidEndDate IS NULL \n  )\n  GROUP BY IdTown\n)\n--Tags\nSELECT\n  CAST(Null AS STRING) as IdCluster,\n  t.IdTown AS IdOrigin,\n  t.Town AS OriginTown,\n  Rut.IdDestination,\n  SUM(TotalPassengers) AS Ventas,\n  CASE\n    WHEN TagOrder=1 THEN 'IsCoastal'\n    WHEN TagOrder=2 THEN 'HasRelevantFestivals'\n    WHEN TagOrder=3 THEN 'IsTouristDestination'\n    ELSE ''\n  END AS Tag\n  ,TagOrder\n  ,Validas.Url\n  ,MIN(Distance) as Distance\n  ,CASE\n    WHEN Validas.IdOrigin IS NULL THEN FALSE\n    ELSE TRUE\n  END AS isValidurl,\n\n  -- AUDITORIA\n  CAST(NULL AS STRING) as IdControl,\n  CAST(CURRENT_TIMESTAMP() AS TIMESTAMP) as CreateDate,\n  'DBT' as CreateUser,\n  CAST(CURRENT_TIMESTAMP() AS TIMESTAMP) as ModifDate,\n  'DBT' as ModifUser,\n  CAST(NULL AS TIMESTAMP) as DeleteDate,\n  CAST(NULL AS STRING) as DeleteUser,\n  \n  CAST(CURRENT_TIMESTAMP() AS TIMESTAMP) as ValidStartDate,\n  CAST(NULL AS TIMESTAMP) as ValidEndDate\n\nFROM {{ ref( \"dim_pueblo\") }} t \nINNER JOIN (\n  SELECT DISTINCT IdJourney, IdOrigin, IdDestination, Distance\n  FROM RouteJourneys\n\n  UNION ALL\n  SELECT DISTINCT IdJourney, IdOriginAlias, IdDestination, Distance\n  FROM RouteJourneys\n  WHERE IdOriginAlias IS NOT NULL\n\n  UNION ALL\n  \n  SELECT DISTINCT IdJourney, IdOrigin, IdDestinationAlias, Distance\n  FROM RouteJourneys\n  WHERE IdDestinationAlias IS NOT NULL\n\n  UNION ALL\n  \n  SELECT DISTINCT IdJourney, IdOriginAlias, IdDestinationAlias, Distance\n  FROM RouteJourneys\n  WHERE IdDestinationAlias IS NOT NULL AND IdOriginAlias IS NOT NULL\n  ) AS Rut\n  ON Rut.IdOrigin = t.IdTown \nLEFT JOIN tags v\n  ON v.IdTown=t.IdTown\nLEFT JOIN Validas\n  ON Validas.IdOrigin=Rut.IdOrigin AND Validas.IdDestination=Rut.IdDestination\nLEFT JOIN (\n  SELECT IdJourney, SUM(TotalPassengers) TotalPassengers\n  FROM {{ ref( \"Al_T_Fact_SalesSearches\") }} v \n  WHERE PARSE_DATE('%Y%m', SAFE_CAST(TravelMonthDate AS STRING)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)\n    AND CURRENT_TIMESTAMP() BETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')\n  GROUP BY IdJourney\n) Ventas\n  ON Ventas.IdJourney = Rut.IdJourney\nWHERE t.ValidEndDate IS NULL\nGROUP BY ALL", "language": "sql", "refs": [{"name": "Al_T_Dim_RouteJourneys", "package": null, "version": null}, {"name": "Al_T_Dim_RutasAlsaSEO", "package": null, "version": null}, {"name": "dim_pueblo", "package": null, "version": null}, {"name": "Al_T_Fact_SalesSearches", "package": null, "version": null}], "sources": [["bq_dim_gld_gemini", "Al_T_Dim_MunicipalityTags"], ["bq_fact_gld_gemini", "Al_T_Fact_TaggedMunicipalities"], ["bq_dim_gld_gemini", "Al_T_Dim_MunicipalityTowns"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_common_gold.bq_dim_gld_gemini.Al_T_Dim_MunicipalityTags", "source.dbt_common_gold.bq_fact_gld_gemini.Al_T_Fact_TaggedMunicipalities", "source.dbt_common_gold.bq_dim_gld_gemini.Al_T_Dim_MunicipalityTowns", "model.dbt_common_gold.Al_T_Dim_RouteJourneys", "model.dbt_common_gold.Al_T_Dim_RutasAlsaSEO", "model.dbt_common_gold.dim_pueblo", "model.dbt_common_gold.Al_T_Fact_SalesSearches"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.Al_T_Fact_VehicleOccupancy": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "Al_T_Fact_VehicleOccupancy", "resource_type": "model", "package_name": "dbt_common_gold", "path": "fact\\Al_T_Fact_VehicleOccupancy\\Al_T_Fact_VehicleOccupancy.sql", "original_file_path": "models\\fact\\Al_T_Fact_VehicleOccupancy\\Al_T_Fact_VehicleOccupancy.sql", "unique_id": "model.dbt_common_gold.Al_T_Fact_VehicleOccupancy", "fqn": ["dbt_common_gold", "fact", "Al_T_Fact_VehicleOccupancy", "Al_T_Fact_VehicleOccupancy"], "alias": "Al_T_Fact_VehicleOccupancy", "checksum": {"name": "sha256", "checksum": "cd42abf91bea20182f0a62593b1febfe2467848c447bd5d3c175033a739f9778"}, "config": {"enabled": true, "alias": "Al_T_Fact_VehicleOccupancy", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["Line", "TripID", "TravelDate", "BusNumber", "OriginCode", "OriginName", "DestinationCode", "DestinationName", "SaleDate", "DaysInAdvance", "SeatsOffered", "OccupiedOriginDest", "OccupiedInitialFinal", "AvailableOriginDest", "AvailableInitialFinal", "InfoDateFrom", "InfoDateTo", "StopDate"], "business_start_date": "CURRENT_TIMESTAMP()", "modif_date": "DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true}, "tags": [], "description": "Tabla de gold Ocupaci\u00f3n Veh\u00edculos", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\fact\\Al_T_Fact_VehicleOccupancy\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Fact_VehicleOccupancy", "unique_keys": ["Line", "TripID", "TravelDate", "BusNumber", "OriginCode", "OriginName", "DestinationCode", "DestinationName", "SaleDate", "DaysInAdvance", "SeatsOffered", "OccupiedOriginDest", "OccupiedInitialFinal", "AvailableOriginDest", "AvailableInitialFinal", "InfoDateFrom", "InfoDateTo", "StopDate"], "business_start_date": "CURRENT_TIMESTAMP()", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true}, "created_at": 1761754836.8467743, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Fact_VehicleOccupancy`", "raw_code": "SELECT\n  Line,\n  TripID,\n  TravelDate,\n  BusNumber,\n  OriginCode,\n  OriginName,\n  DestinationCode,\n  DestinationName,\n  SaleDate,\n  DaysInAdvance,\n  SeatsOffered,\n  OccupiedOriginDest,\n  OccupiedInitialFinal,\n  AvailableOriginDest,\n  AvailableInitialFinal,\n  InfoDateFrom,\n  InfoDateTo,\n  StopDate\nFROM {{ source('bq_dim_silver_com', 'Al_T_Fact_VehicleOccupancy') }}\nWHERE {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\n  BETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')\nAND DATE(modifdate) >= {{ var(\"modif_date\", get_config_value_v4(\"modif_date\")) }}", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Fact_VehicleOccupancy"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Fact_VehicleOccupancy"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.Al_T_Lkt_SecondaryVehicleProvider": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "Al_T_Lkt_SecondaryVehicleProvider", "resource_type": "model", "package_name": "dbt_common_gold", "path": "lkt\\Al_T_Lkt_SecondaryVehicleProvider\\Al_T_Lkt_SecondaryVehicleProvider.sql", "original_file_path": "models\\lkt\\Al_T_Lkt_SecondaryVehicleProvider\\Al_T_Lkt_SecondaryVehicleProvider.sql", "unique_id": "model.dbt_common_gold.Al_T_Lkt_SecondaryVehicleProvider", "fqn": ["dbt_common_gold", "lkt", "Al_T_Lkt_SecondaryVehicleProvider", "Al_T_Lkt_SecondaryVehicleProvider"], "alias": "Al_T_Lkt_SecondaryVehicleProvider", "checksum": {"name": "sha256", "checksum": "60d340fe2160eb7642cdee1f9f99d1c1f2046fbb3f662786ba34367bd708d5a1"}, "config": {"enabled": true, "alias": "Al_T_Lkt_SecondaryVehicleProvider", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental_alsa", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "unique_keys": ["IdVehicle", "System"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "business_start_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "source", "source_unique_keys": [{"table_name": ["bq_com_slv", "Al_T_Lkt_SecondaryVehicleProvider"], "delete_clause": null, "unique_keys": [{"IdVehicle": "IdVehicle"}, {"System": "System"}]}]}}, "tags": [], "description": "Tabla Lkt Silver", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\lkt\\Al_T_Lkt_SecondaryVehicleProvider\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental_alsa", "alias": "Al_T_Lkt_SecondaryVehicleProvider", "unique_keys": ["IdVehicle", "System"], "cluster_by": ["modifdate", "validStartDate", "ValidEndDate", "DeleteDate"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "business_start_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "source", "source_unique_keys": [{"table_name": ["bq_com_slv", "Al_T_Lkt_SecondaryVehicleProvider"], "delete_clause": null, "unique_keys": [{"IdVehicle": "IdVehicle"}, {"System": "System"}]}]}}, "created_at": 1761754836.850775, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Lkt_SecondaryVehicleProvider`", "raw_code": "SELECT \n      IdVehicle, \n      LicensePlate, \n      System, \n      Registers, \n      TimestampInit, \n      TimestampEnd\nFROM {{ source('bq_com_slv', 'Al_T_Lkt_SecondaryVehicleProvider') }}\n{% if is_incremental() %}\n   WHERE modifdate >= {{ var(\"modif_date\", get_config_value_v4(\"modif_date\")) }}\n{% else %}\n  WHERE 1=1\n{% endif %}\nAND {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\nBETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')", "language": "sql", "refs": [], "sources": [["bq_com_slv", "Al_T_Lkt_SecondaryVehicleProvider"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_common_gold.bq_com_slv.Al_T_Lkt_SecondaryVehicleProvider"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_common_gold.Al_T_Lkt_VehicleEvolLV": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "Al_T_Lkt_VehicleEvolLV", "resource_type": "model", "package_name": "dbt_common_gold", "path": "lkt\\Al_T_Lkt_VehicleEvolLV\\Al_T_Lkt_VehicleEvolLV.sql", "original_file_path": "models\\lkt\\Al_T_Lkt_VehicleEvolLV\\Al_T_Lkt_VehicleEvolLV.sql", "unique_id": "model.dbt_common_gold.Al_T_Lkt_VehicleEvolLV", "fqn": ["dbt_common_gold", "lkt", "Al_T_Lkt_VehicleEvolLV", "Al_T_Lkt_VehicleEvolLV"], "alias": "Al_MV_Lkt_VehicleEvolLV", "checksum": {"name": "sha256", "checksum": "8b469644d0c2ead8991f225d7e757f65e331cce6a9cbbab8e7930498c06d10cf"}, "config": {"enabled": true, "alias": "Al_MV_Lkt_VehicleEvolLV", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["IdCompany", "IdVehicle", "DateVehicleStart", "LicensePlate"], "unique_keys": ["IdCompany", "IdVehicle"], "business_start_date": "CURRENT_TIMESTAMP()", "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "source", "source_unique_keys": [{"table_name": ["bq_com_slv", "Al_T_Lkt_VehicleEvolLV_Stg1"], "delete_clause": null, "unique_keys": [{"IdCompany": "IdCompany"}, {"IdVehicle": "IdVehicle"}, {"DateVehicleStart": "DateVehicleStart"}, {"LicensePlate": "LicensePlate"}]}]}}, "tags": [], "description": "Tabla Lkt Gold", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\lkt\\Al_T_Lkt_VehicleEvolLV\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "alias": "Al_MV_Lkt_VehicleEvolLV", "unique_keys": ["IdCompany", "IdVehicle"], "business_start_date": "CURRENT_TIMESTAMP()", "cluster_by": ["IdCompany", "IdVehicle", "DateVehicleStart", "LicensePlate"], "modif_date": "DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)", "version_date": "CURRENT_TIMESTAMP()", "historic": true, "delete_strategy": {"type": "source", "source_unique_keys": [{"table_name": ["bq_com_slv", "Al_T_Lkt_VehicleEvolLV_Stg1"], "delete_clause": null, "unique_keys": [{"IdCompany": "IdCompany"}, {"IdVehicle": "IdVehicle"}, {"DateVehicleStart": "DateVehicleStart"}, {"LicensePlate": "LicensePlate"}]}]}}, "created_at": 1761754836.8527284, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_MV_Lkt_VehicleEvolLV`", "raw_code": "SELECT \n    IdZone,\n    IdZu, \n    Zu,\n    IdDivision, \n    Division,\n    IdVehicle, \n    IdCompany,\n    IdCg, \n    Cg,\n    DateVehicleStart, \n    DateVehicleEnd, \n    LicensePlate,\n    Class,\n    SystemPrincipal,\n    SystemSecundary,\n    Cam,\n    CCTV,\n    Tachograph,\n    GPS,\n    ABC,\n    IdCompanyRenting,\n    IdCompanyOwner\nFROM {{ source('bq_com_slv', 'Al_T_Lkt_VehicleEvolLV_Stg1') }} main\n-- {% if is_incremental() %}\n--   WHERE 1=1\n-- {% else %}\n--    WHERE modifdate >= {{ var(\"modif_date\", get_config_value_v4(\"modif_date\")) }}\n  \n-- {% endif %}\nwhere {{ var(\"version_date\", get_config_value_v4(\"version_date\")) }}\nBETWEEN ValidStartDate AND COALESCE(ValidEndDate, '3000-1-1')", "language": "sql", "refs": [], "sources": [["bq_com_slv", "Al_T_Lkt_VehicleEvolLV_Stg1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_common_gold.bq_com_slv.Al_T_Lkt_VehicleEvolLV_Stg1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}}, "sources": {"source.dbt_common_gold.bq_agg_silver_com.Al_T_Agg_Activity_Date": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Agg_Activity_Date", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\agg\\sources.yml", "original_file_path": "models\\agg\\sources.yml", "unique_id": "source.dbt_common_gold.bq_agg_silver_com.Al_T_Agg_Activity_Date", "fqn": ["dbt_common_gold", "agg", "bq_agg_silver_com", "Al_T_Agg_Activity_Date"], "source_name": "bq_agg_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Agg_Activity_Date", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Agg_Activity_Date`", "created_at": 1761754836.855793, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Vehicle": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_Vehicle", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Vehicle", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_Vehicle"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_Vehicle", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_Vehicle`", "created_at": 1761754836.856805, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Line": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_Line", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Line", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_Line"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_Line", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_Line`", "created_at": 1761754836.856805, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Stops": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_Stops", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Stops", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_Stops"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_Stops", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_Stops`", "created_at": 1761754836.856805, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Shapes": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_Shapes", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Shapes", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_Shapes"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_Shapes", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_Shapes`", "created_at": 1761754836.856805, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Zone": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_Zone", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Zone", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_Zone"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_Zone", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_Zone`", "created_at": 1761754836.856805, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Division": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_Division", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Division", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_Division"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_Division", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_Division`", "created_at": 1761754836.8578105, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_ZonalUnit": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_ZonalUnit", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_ZonalUnit", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_ZonalUnit"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_ZonalUnit", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_ZonalUnit`", "created_at": 1761754836.8578105, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Axis": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_Axis", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Axis", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_Axis"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_Axis", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_Axis`", "created_at": 1761754836.8578105, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Company": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_Company", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Company", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_Company"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_Company", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_Company`", "created_at": 1761754836.8578105, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Brand": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_Brand", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Brand", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_Brand"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_Brand", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_Brand`", "created_at": 1761754836.8578105, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Model": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_Model", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Model", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_Model"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_Model", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_Model`", "created_at": 1761754836.8578105, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Fuel": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_Fuel", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Fuel", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_Fuel"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_Fuel", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_Fuel`", "created_at": 1761754836.8578105, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_ContractGroup": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_ContractGroup", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_ContractGroup", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_ContractGroup"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_ContractGroup", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_ContractGroup`", "created_at": 1761754836.8578105, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_LineEvol": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_LineEvol", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_LineEvol", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_LineEvol"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_LineEvol", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_LineEvol`", "created_at": 1761754836.8578105, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_LineEvolOS": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_LineEvolOS", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_LineEvolOS", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_LineEvolOS"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_LineEvolOS", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_LineEvolOS`", "created_at": 1761754836.8578105, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_CompanyZoneEvol": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_CompanyZoneEvol", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_CompanyZoneEvol", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_CompanyZoneEvol"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_CompanyZoneEvol", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_CompanyZoneEvol`", "created_at": 1761754836.8578105, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_VehicleEvol": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_VehicleEvol", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_VehicleEvol", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_VehicleEvol"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_VehicleEvol", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_VehicleEvol`", "created_at": 1761754836.8578105, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_DriverCompanyEvol": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_DriverCompanyEvol", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_DriverCompanyEvol", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_DriverCompanyEvol"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_DriverCompanyEvol", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_DriverCompanyEvol`", "created_at": 1761754836.858805, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Calendar": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_Calendar", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Calendar", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_Calendar"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_Calendar", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_Calendar`", "created_at": 1761754836.858805, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Driver": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_Driver", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Driver", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_Driver"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_Driver", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_Driver`", "created_at": 1761754836.858805, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Employee": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_Employee", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Employee", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_Employee"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_Employee", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_Employee`", "created_at": 1761754836.858805, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_VehicleGarageEvol": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_VehicleGarageEvol", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_VehicleGarageEvol", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_VehicleGarageEvol"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_VehicleGarageEvol", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_VehicleGarageEvol`", "created_at": 1761754836.858805, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Systems": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_Systems", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Systems", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_Systems"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_Systems", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_Systems`", "created_at": 1761754836.858805, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_ClosingDates": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_ClosingDates", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_ClosingDates", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_ClosingDates"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_ClosingDates", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_ClosingDates`", "created_at": 1761754836.858805, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Gender": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_Gender", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Gender", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_Gender"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_Gender", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_Gender`", "created_at": 1761754836.858805, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Translations": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_Translations", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Translations", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_Translations"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_Translations", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_Translations`", "created_at": 1761754836.858805, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Itinerary": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_Itinerary", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Itinerary", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_Itinerary"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_Itinerary", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_Itinerary`", "created_at": 1761754836.858805, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_TypeTrans": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_TypeTrans", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_TypeTrans", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_TypeTrans"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_TypeTrans", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_TypeTrans`", "created_at": 1761754836.858805, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Concession": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_Concession", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Concession", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_Concession"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_Concession", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_Concession`", "created_at": 1761754836.858805, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_ServiceType": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_ServiceType", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_ServiceType", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_ServiceType"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_ServiceType", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_ServiceType`", "created_at": 1761754836.859803, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Expedition": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_Expedition", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Expedition", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_Expedition"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_Expedition", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_Expedition`", "created_at": 1761754836.859803, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Town": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_Town", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Town", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_Town"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_Town", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_Town`", "created_at": 1761754836.859803, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_ServiceSubType": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_ServiceSubType", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_ServiceSubType", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_ServiceSubType"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_ServiceSubType", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_ServiceSubType`", "created_at": 1761754836.859803, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Subsituation": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_Subsituation", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Subsituation", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_Subsituation"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_Subsituation", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_Subsituation`", "created_at": 1761754836.859803, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Journey": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_Journey", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Journey", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_Journey"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_Journey", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_Journey`", "created_at": 1761754836.859803, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Route": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_Route", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Route", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_Route"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_Route", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_Route`", "created_at": 1761754836.859803, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_AlsaProviders": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_AlsaProviders", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_AlsaProviders", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_AlsaProviders"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_AlsaProviders", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_AlsaProviders`", "created_at": 1761754836.859803, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Fact_CompetitorsPricing": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Fact_CompetitorsPricing", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Fact_CompetitorsPricing", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Fact_CompetitorsPricing"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Fact_CompetitorsPricing", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Fact_CompetitorsPricing`", "created_at": 1761754836.859803, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Fact_Sales": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Fact_Sales", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Fact_Sales", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Fact_Sales"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Fact_Sales", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Fact_Sales`", "created_at": 1761754836.859803, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Fact_VehicleOccupancy": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Fact_VehicleOccupancy", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Fact_VehicleOccupancy", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Fact_VehicleOccupancy"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Fact_VehicleOccupancy", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Fact_VehicleOccupancy`", "created_at": 1761754836.859803, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_RutasAlsaSEO": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_RutasAlsaSEO", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_RutasAlsaSEO", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_RutasAlsaSEO"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_RutasAlsaSEO", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_RutasAlsaSEO`", "created_at": 1761754836.859803, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_TownAlias": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_TownAlias", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_TownAlias", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com", "Al_T_Dim_TownAlias"], "source_name": "bq_dim_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_TownAlias", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_TownAlias`", "created_at": 1761754836.860803, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_silver_com_marital.Al_T_Dim_MaritalStatus": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_MaritalStatus", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_silver_com_marital.Al_T_Dim_MaritalStatus", "fqn": ["dbt_common_gold", "dim", "bq_dim_silver_com_marital", "Al_T_Dim_MaritalStatus"], "source_name": "bq_dim_silver_com_marital", "source_description": "", "loader": "", "identifier": "Al_T_Dim_MaritalStatus", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_MaritalStatus`", "created_at": 1761754836.860803, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_dim_gld_com.Al_T_Dim_RouteJourneys": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "Al_T_Dim_RouteJourneys", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_gld_com.Al_T_Dim_RouteJourneys", "fqn": ["dbt_common_gold", "dim", "bq_dim_gld_com", "Al_T_Dim_RouteJourneys"], "source_name": "bq_dim_gld_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_RouteJourneys", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_RouteJourneys`", "created_at": 1761754836.860803, "unrendered_database": "prj-gld-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_test_westeu_01"}, "source.dbt_common_gold.bq_dim_gld_com.Al_T_Dim_Line": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "Al_T_Dim_Line", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_gld_com.Al_T_Dim_Line", "fqn": ["dbt_common_gold", "dim", "bq_dim_gld_com", "Al_T_Dim_Line"], "source_name": "bq_dim_gld_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_Line", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_Line`", "created_at": 1761754836.860803, "unrendered_database": "prj-gld-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_test_westeu_01"}, "source.dbt_common_gold.bq_dim_gld_com.Al_T_Dim_JourneyLines": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "Al_T_Dim_JourneyLines", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_gld_com.Al_T_Dim_JourneyLines", "fqn": ["dbt_common_gold", "dim", "bq_dim_gld_com", "Al_T_Dim_JourneyLines"], "source_name": "bq_dim_gld_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_JourneyLines", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_JourneyLines`", "created_at": 1761754836.860803, "unrendered_database": "prj-gld-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_test_westeu_01"}, "source.dbt_common_gold.bq_dim_gld_com.Al_T_Dim_TownAlias": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "Al_T_Dim_TownAlias", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_gld_com.Al_T_Dim_TownAlias", "fqn": ["dbt_common_gold", "dim", "bq_dim_gld_com", "Al_T_Dim_TownAlias"], "source_name": "bq_dim_gld_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_TownAlias", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_TownAlias`", "created_at": 1761754836.860803, "unrendered_database": "prj-gld-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_test_westeu_01"}, "source.dbt_common_gold.bq_dim_gld_gemini.Al_T_Dim_MunicipalityTags": {"database": "prj-gld-dev-westeu-01", "schema": "bq_gemini_gld_dev_westeu_01", "name": "Al_T_Dim_MunicipalityTags", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_gld_gemini.Al_T_Dim_MunicipalityTags", "fqn": ["dbt_common_gold", "dim", "bq_dim_gld_gemini", "Al_T_Dim_MunicipalityTags"], "source_name": "bq_dim_gld_gemini", "source_description": "", "loader": "", "identifier": "Al_T_Dim_MunicipalityTags", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-gld-dev-westeu-01`.`bq_gemini_gld_dev_westeu_01`.`Al_T_Dim_MunicipalityTags`", "created_at": 1761754836.860803, "unrendered_database": "prj-gld-{{ target.name }}-westeu-01", "unrendered_schema": "bq_gemini_gld_dev_westeu_01"}, "source.dbt_common_gold.bq_dim_gld_gemini.Al_T_Dim_MunicipalityTowns": {"database": "prj-gld-dev-westeu-01", "schema": "bq_gemini_gld_dev_westeu_01", "name": "Al_T_Dim_MunicipalityTowns", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\dim\\sources.yml", "original_file_path": "models\\dim\\sources.yml", "unique_id": "source.dbt_common_gold.bq_dim_gld_gemini.Al_T_Dim_MunicipalityTowns", "fqn": ["dbt_common_gold", "dim", "bq_dim_gld_gemini", "Al_T_Dim_MunicipalityTowns"], "source_name": "bq_dim_gld_gemini", "source_description": "", "loader": "", "identifier": "Al_T_Dim_MunicipalityTowns", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-gld-dev-westeu-01`.`bq_gemini_gld_dev_westeu_01`.`Al_T_Dim_MunicipalityTowns`", "created_at": 1761754836.860803, "unrendered_database": "prj-gld-{{ target.name }}-westeu-01", "unrendered_schema": "bq_gemini_gld_dev_westeu_01"}, "source.dbt_common_gold.bq_fact_silver_com.Al_T_Fact_Planner": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Fact_Planner", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\fact\\sources.yml", "original_file_path": "models\\fact\\sources.yml", "unique_id": "source.dbt_common_gold.bq_fact_silver_com.Al_T_Fact_Planner", "fqn": ["dbt_common_gold", "fact", "bq_fact_silver_com", "Al_T_Fact_Planner"], "source_name": "bq_fact_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Fact_Planner", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Fact_Planner`", "created_at": 1761754836.860803, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_fact_silver_com.Al_T_Fact_ServiceActivity_PW": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Fact_ServiceActivity_PW", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\fact\\sources.yml", "original_file_path": "models\\fact\\sources.yml", "unique_id": "source.dbt_common_gold.bq_fact_silver_com.Al_T_Fact_ServiceActivity_PW", "fqn": ["dbt_common_gold", "fact", "bq_fact_silver_com", "Al_T_Fact_ServiceActivity_PW"], "source_name": "bq_fact_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Fact_ServiceActivity_PW", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Fact_ServiceActivity_PW`", "created_at": 1761754836.860803, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_fact_silver_com.Al_T_Fact_JourneySales": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Fact_JourneySales", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\fact\\sources.yml", "original_file_path": "models\\fact\\sources.yml", "unique_id": "source.dbt_common_gold.bq_fact_silver_com.Al_T_Fact_JourneySales", "fqn": ["dbt_common_gold", "fact", "bq_fact_silver_com", "Al_T_Fact_JourneySales"], "source_name": "bq_fact_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Fact_JourneySales", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Fact_JourneySales`", "created_at": 1761754836.860803, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_fact_silver_com.Al_T_Fact_JourneySearches": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Fact_JourneySearches", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\fact\\sources.yml", "original_file_path": "models\\fact\\sources.yml", "unique_id": "source.dbt_common_gold.bq_fact_silver_com.Al_T_Fact_JourneySearches", "fqn": ["dbt_common_gold", "fact", "bq_fact_silver_com", "Al_T_Fact_JourneySearches"], "source_name": "bq_fact_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Fact_JourneySearches", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Fact_JourneySearches`", "created_at": 1761754836.860803, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_fact_silver_com.Al_T_Fact_Planweb_Xsercp_SA": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Fact_Planweb_Xsercp_SA", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\fact\\sources.yml", "original_file_path": "models\\fact\\sources.yml", "unique_id": "source.dbt_common_gold.bq_fact_silver_com.Al_T_Fact_Planweb_Xsercp_SA", "fqn": ["dbt_common_gold", "fact", "bq_fact_silver_com", "Al_T_Fact_Planweb_Xsercp_SA"], "source_name": "bq_fact_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Fact_Planweb_Xsercp_SA", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Fact_Planweb_Xsercp_SA`", "created_at": 1761754836.8618026, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_fact_silver_com.Al_T_Agg_PositionsControlORA": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Agg_PositionsControlORA", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\fact\\sources.yml", "original_file_path": "models\\fact\\sources.yml", "unique_id": "source.dbt_common_gold.bq_fact_silver_com.Al_T_Agg_PositionsControlORA", "fqn": ["dbt_common_gold", "fact", "bq_fact_silver_com", "Al_T_Agg_PositionsControlORA"], "source_name": "bq_fact_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Agg_PositionsControlORA", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Agg_PositionsControlORA`", "created_at": 1761754836.8618026, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_fact_silver_com.Al_T_Agg_PositionsControlGCP": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Agg_PositionsControlGCP", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\fact\\sources.yml", "original_file_path": "models\\fact\\sources.yml", "unique_id": "source.dbt_common_gold.bq_fact_silver_com.Al_T_Agg_PositionsControlGCP", "fqn": ["dbt_common_gold", "fact", "bq_fact_silver_com", "Al_T_Agg_PositionsControlGCP"], "source_name": "bq_fact_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Agg_PositionsControlGCP", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Agg_PositionsControlGCP`", "created_at": 1761754836.8618026, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_fact_silver_com.Al_T_Dim_Systems": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Dim_Systems", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\fact\\sources.yml", "original_file_path": "models\\fact\\sources.yml", "unique_id": "source.dbt_common_gold.bq_fact_silver_com.Al_T_Dim_Systems", "fqn": ["dbt_common_gold", "fact", "bq_fact_silver_com", "Al_T_Dim_Systems"], "source_name": "bq_fact_silver_com", "source_description": "", "loader": "", "identifier": "Al_T_Dim_Systems", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Dim_Systems`", "created_at": 1761754836.8618026, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_fact_gld_com.Al_T_Fact_SalesSearches": {"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "Al_T_Fact_SalesSearches", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\fact\\sources.yml", "original_file_path": "models\\fact\\sources.yml", "unique_id": "source.dbt_common_gold.bq_fact_gld_com.Al_T_Fact_SalesSearches", "fqn": ["dbt_common_gold", "fact", "bq_fact_gld_com", "Al_T_Fact_SalesSearches"], "source_name": "bq_fact_gld_com", "source_description": "", "loader": "", "identifier": "Al_T_Fact_SalesSearches", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Fact_SalesSearches`", "created_at": 1761754836.8618026, "unrendered_database": "prj-gld-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_test_westeu_01"}, "source.dbt_common_gold.bq_fact_gld_gemini.Al_T_Fact_TaggedMunicipalities": {"database": "prj-gld-dev-westeu-01", "schema": "bq_gemini_gld_dev_westeu_01", "name": "Al_T_Fact_TaggedMunicipalities", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\fact\\sources.yml", "original_file_path": "models\\fact\\sources.yml", "unique_id": "source.dbt_common_gold.bq_fact_gld_gemini.Al_T_Fact_TaggedMunicipalities", "fqn": ["dbt_common_gold", "fact", "bq_fact_gld_gemini", "Al_T_Fact_TaggedMunicipalities"], "source_name": "bq_fact_gld_gemini", "source_description": "", "loader": "", "identifier": "Al_T_Fact_TaggedMunicipalities", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-gld-dev-westeu-01`.`bq_gemini_gld_dev_westeu_01`.`Al_T_Fact_TaggedMunicipalities`", "created_at": 1761754836.8618026, "unrendered_database": "prj-gld-{{ target.name }}-westeu-01", "unrendered_schema": "bq_gemini_gld_dev_westeu_01"}, "source.dbt_common_gold.bq_com_slv.Al_T_Lkt_VehicleEvolLV_Stg1": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Lkt_VehicleEvolLV_Stg1", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\lkt\\sources.yml", "original_file_path": "models\\lkt\\sources.yml", "unique_id": "source.dbt_common_gold.bq_com_slv.Al_T_Lkt_VehicleEvolLV_Stg1", "fqn": ["dbt_common_gold", "lkt", "bq_com_slv", "Al_T_Lkt_VehicleEvolLV_Stg1"], "source_name": "bq_com_slv", "source_description": "", "loader": "", "identifier": "Al_T_Lkt_VehicleEvolLV_Stg1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Lkt_VehicleEvolLV_Stg1`", "created_at": 1761754836.8618026, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}, "source.dbt_common_gold.bq_com_slv.Al_T_Lkt_SecondaryVehicleProvider": {"database": "prj-slv-dev-westeu-01", "schema": "bq_com_dev_westeu_01", "name": "Al_T_Lkt_SecondaryVehicleProvider", "resource_type": "source", "package_name": "dbt_common_gold", "path": "models\\lkt\\sources.yml", "original_file_path": "models\\lkt\\sources.yml", "unique_id": "source.dbt_common_gold.bq_com_slv.Al_T_Lkt_SecondaryVehicleProvider", "fqn": ["dbt_common_gold", "lkt", "bq_com_slv", "Al_T_Lkt_SecondaryVehicleProvider"], "source_name": "bq_com_slv", "source_description": "", "loader": "", "identifier": "Al_T_Lkt_SecondaryVehicleProvider", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`prj-slv-dev-westeu-01`.`bq_com_dev_westeu_01`.`Al_T_Lkt_SecondaryVehicleProvider`", "created_at": 1761754836.8618026, "unrendered_database": "prj-slv-{{ target.name }}-westeu-01", "unrendered_schema": "bq_com_{{ target.name }}_westeu_01"}}, "macros": {"macro.dbt_bigquery.bigquery__create_table_as": {"name": "bigquery__create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- if partition_config.time_ingestion_partitioning -%}\n    {%- set columns = get_columns_with_types_in_query_sql(sql) -%}\n    {%- set table_dest_columns_csv = columns_without_partition_fields_csv(partition_config, columns) -%}\n    {%- set columns = '(' ~ table_dest_columns_csv ~ ')' -%}\n    {%- endif -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n      {%- set contract_config = config.get('contract') -%}\n      {%- if contract_config.enforced -%}\n        {{ get_assert_columns_equivalent(compiled_code) }}\n        {{ get_table_columns_and_constraints() }}\n        {%- set compiled_code = get_select_subquery(compiled_code) %}\n      {% else %}\n        {#-- cannot do contracts at the same time as time ingestion partitioning -#}\n        {{ columns }}\n      {% endif %}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n\n    {{ bigquery_table_options(config, model, temporary) }}\n\n    {#-- PARTITION BY cannot be used with the AS query_statement clause.\n         https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#partition_expression\n    -#}\n    {%- if not partition_config.time_ingestion_partitioning %}\n    as (\n      {{ compiled_code }}\n    );\n    {%- endif %}\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n\n    {#-- when a user wants to change the schema of an existing relation, they must intentionally drop the table in the dataset --#}\n    {%- set old_relation = adapter.get_relation(database=relation.database, schema=relation.schema, identifier=relation.identifier) -%}\n    {%- if (old_relation.is_table and (should_full_refresh())) -%}\n      {% do adapter.drop_relation(relation) %}\n    {%- endif -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options", "macro.dbt.should_full_refresh", "macro.dbt_bigquery.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.870537, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_view_as": {"name": "bigquery__create_view_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  as {{ sql }};\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.870537, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_schema": {"name": "bigquery__drop_schema", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.870537, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"name": "bigquery__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.870537, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"name": "bigquery__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.870537, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_schemas": {"name": "bigquery__list_schemas", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.870537, "supported_languages": null}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"name": "bigquery__check_schema_exists", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.870537, "supported_languages": null}, "macro.dbt_bigquery.bigquery__persist_docs": {"name": "bigquery__persist_docs", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.870537, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"name": "bigquery__alter_column_comment", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.870537, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"name": "bigquery__alter_relation_add_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.870537, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"name": "bigquery__alter_relation_drop_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.870537, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_type": {"name": "bigquery__alter_column_type", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.870537, "supported_languages": null}, "macro.dbt_bigquery.bigquery__test_unique": {"name": "bigquery__test_unique", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.870537, "supported_languages": null}, "macro.dbt_bigquery.bigquery__upload_file": {"name": "bigquery__upload_file", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.870537, "supported_languages": null}, "macro.dbt_bigquery.date_sharded_table": {"name": "date_sharded_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\etc.sql", "original_file_path": "macros\\etc.sql", "unique_id": "macro.dbt_bigquery.date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.870537, "supported_languages": null}, "macro.dbt_bigquery.grant_access_to": {"name": "grant_access_to", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\etc.sql", "original_file_path": "macros\\etc.sql", "unique_id": "macro.dbt_bigquery.grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.870537, "supported_languages": null}, "macro.dbt_bigquery.get_partitions_metadata": {"name": "get_partitions_metadata", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\etc.sql", "original_file_path": "macros\\etc.sql", "unique_id": "macro.dbt_bigquery.get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.870537, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"name": "bigquery__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.870537, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"name": "bigquery__get_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.8757463, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"name": "bigquery__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.8757463, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_subquery_sql": {"name": "bigquery__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_subquery_sql", "macro_sql": "{% macro bigquery__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false and current_timestamp() = current_timestamp()\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.8757463, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog_relations": {"name": "bigquery__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\catalog\\by_relation.sql", "original_file_path": "macros\\catalog\\by_relation.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog_relations", "macro_sql": "{% macro bigquery__get_catalog_relations(information_schema, relations) -%}\n\n    {%- if (relations | length) == 0 -%}\n        {# Hopefully nothing cares about the columns we return when there are no rows #}\n        {%- set query = \"select 1 as id limit 0\" -%}\n\n    {%- else -%}\n        {%- set query -%}\n            with\n                table_shards_stage as ({{ _bigquery__get_table_shards_sql(information_schema) }}),\n                table_shards as (\n                    select * from table_shards_stage\n                    where (\n                        {%- for relation in relations -%}\n                            (\n                                upper(table_schema) = upper('{{ relation.schema }}')\n                            and upper(table_name) = upper('{{ relation.identifier }}')\n                            )\n                            {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                    )\n                ),\n                tables as ({{ _bigquery__get_tables_sql() }}),\n                table_stats as ({{ _bigquery__get_table_stats_sql() }}),\n\n                columns as ({{ _bigquery__get_columns_sql(information_schema) }}),\n                column_stats as ({{ _bigquery__get_column_stats_sql() }})\n\n            {{ _bigquery__get_extended_catalog_sql() }}\n        {%- endset -%}\n\n    {%- endif -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro.dbt_bigquery._bigquery__get_tables_sql", "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro.dbt_bigquery._bigquery__get_columns_sql", "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.8757463, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog": {"name": "bigquery__get_catalog", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\catalog\\by_schema.sql", "original_file_path": "macros\\catalog\\by_schema.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n    {%- if (schemas | length) == 0 -%}\n        {# Hopefully nothing cares about the columns we return when there are no rows #}\n        {%- set query = \"select 1 as id limit 0\" -%}\n\n    {%- else -%}\n        {%- set query -%}\n            with\n                table_shards as (\n                    {{ _bigquery__get_table_shards_sql(information_schema) }}\n                    where (\n                        {%- for schema in schemas -%}\n                            upper(tables.dataset_id) = upper('{{ schema }}')\n                            {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                    )\n                ),\n                tables as ({{ _bigquery__get_tables_sql() }}),\n                table_stats as ({{ _bigquery__get_table_stats_sql() }}),\n\n                columns as ({{ _bigquery__get_columns_sql(information_schema) }}),\n                column_stats as ({{ _bigquery__get_column_stats_sql() }})\n\n            {{ _bigquery__get_extended_catalog_sql() }}\n        {%- endset -%}\n\n    {%- endif -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro.dbt_bigquery._bigquery__get_tables_sql", "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro.dbt_bigquery._bigquery__get_columns_sql", "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.8779833, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_table_shards_sql": {"name": "_bigquery__get_table_shards_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\catalog\\catalog.sql", "original_file_path": "macros\\catalog\\catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro_sql": "{% macro _bigquery__get_table_shards_sql(information_schema) %}\n    select\n        tables.project_id as table_catalog,\n        tables.dataset_id as table_schema,\n        coalesce(REGEXP_EXTRACT(tables.table_id, '^(.+)[0-9]{8}$'), tables.table_id) as table_name,\n        tables.table_id as shard_name,\n        REGEXP_EXTRACT(tables.table_id, '^.+([0-9]{8})$') as shard_index,\n        REGEXP_CONTAINS(tables.table_id, '^.+[0-9]{8}$') and tables.type = 1 as is_date_shard,\n        case\n            when materialized_views.table_name is not null then 'materialized view'\n            when tables.type = 1 then 'table'\n            when tables.type = 2 then 'view'\n            else 'external'\n        end as table_type,\n        tables.type = 1 as is_table,\n        JSON_VALUE(table_description.option_value) as table_comment,\n        tables.size_bytes,\n        tables.row_count\n    from {{ information_schema.replace(information_schema_view='__TABLES__') }} tables\n    left join {{ information_schema.replace(information_schema_view='MATERIALIZED_VIEWS') }} materialized_views\n        on materialized_views.table_catalog = tables.project_id\n        and materialized_views.table_schema = tables.dataset_id\n        and materialized_views.table_name = tables.table_id\n    left join {{ information_schema.replace(information_schema_view='TABLE_OPTIONS') }} table_description\n        on table_description.table_catalog = tables.project_id\n        and table_description.table_schema = tables.dataset_id\n        and table_description.table_name = tables.table_id\n        and table_description.option_name = 'description'\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.8779833, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_tables_sql": {"name": "_bigquery__get_tables_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\catalog\\catalog.sql", "original_file_path": "macros\\catalog\\catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_tables_sql", "macro_sql": "{% macro _bigquery__get_tables_sql() %}\n    select distinct\n        table_catalog,\n        table_schema,\n        table_name,\n        is_date_shard,\n        table_type,\n        is_table,\n        table_comment\n    from table_shards\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.8779833, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_table_stats_sql": {"name": "_bigquery__get_table_stats_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\catalog\\catalog.sql", "original_file_path": "macros\\catalog\\catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro_sql": "{% macro _bigquery__get_table_stats_sql() %}\n    select\n        table_catalog,\n        table_schema,\n        table_name,\n        max(shard_name) as latest_shard_name,\n        min(shard_index) as shard_min,\n        max(shard_index) as shard_max,\n        count(shard_index) as shard_count,\n        sum(size_bytes) as size_bytes,\n        sum(row_count) as row_count\n    from table_shards\n    group by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.8779833, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_columns_sql": {"name": "_bigquery__get_columns_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\catalog\\catalog.sql", "original_file_path": "macros\\catalog\\catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_columns_sql", "macro_sql": "{% macro _bigquery__get_columns_sql(information_schema) %}\n    select\n        columns.table_catalog,\n        columns.table_schema,\n        columns.table_name as shard_name,\n        coalesce(paths.field_path, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields\n        -- BQ does not treat these nested properties as independent fields\n        row_number() over (\n            partition by\n                columns.table_catalog,\n                columns.table_schema,\n                columns.table_name\n            order by\n                columns.ordinal_position,\n                paths.field_path\n        ) as column_index,\n        coalesce(paths.data_type, '<unknown>') as column_type,\n        paths.description as column_comment,\n        case when columns.is_partitioning_column = 'YES' then 1 else 0 end as is_partitioning_column,\n        case when columns.is_partitioning_column = 'YES' then paths.field_path end as partition_column,\n        case when columns.clustering_ordinal_position is not null then 1 else 0 end as is_clustering_column,\n        case when columns.clustering_ordinal_position is not null then paths.field_path end as cluster_column,\n        columns.clustering_ordinal_position\n    from {{ information_schema.replace(information_schema_view='COLUMNS') }} columns\n    join {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }} paths\n        on paths.table_catalog = columns.table_catalog\n        and paths.table_schema = columns.table_schema\n        and paths.table_name = columns.table_name\n        and paths.column_name = columns.column_name\n    where columns.ordinal_position is not null\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.8779833, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_column_stats_sql": {"name": "_bigquery__get_column_stats_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\catalog\\catalog.sql", "original_file_path": "macros\\catalog\\catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro_sql": "{% macro _bigquery__get_column_stats_sql() %}\n    select\n        table_catalog,\n        table_schema,\n        shard_name,\n        max(is_partitioning_column) = 1 as is_partitioned,\n        max(partition_column) as partition_column,\n        max(is_clustering_column) = 1 as is_clustered,\n        array_to_string(\n            array_agg(\n                cluster_column ignore nulls\n                order by clustering_ordinal_position\n            ), ', '\n        ) as clustering_columns\n    from columns\n    group by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.8779833, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_extended_catalog_sql": {"name": "_bigquery__get_extended_catalog_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\catalog\\catalog.sql", "original_file_path": "macros\\catalog\\catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro_sql": "{% macro _bigquery__get_extended_catalog_sql() %}\n    select\n        tables.table_catalog as table_database,\n        tables.table_schema,\n        case\n            when tables.is_date_shard then concat(tables.table_name, '*')\n            else tables.table_name\n        end as table_name,\n        tables.table_type,\n        tables.table_comment,\n        -- coalesce column metadata fields to ensure they are non-null for catalog generation\n        -- external table columns are not present in COLUMN_FIELD_PATHS\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        coalesce(columns.column_index, 1) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        coalesce(columns.column_comment, '') as column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_stats.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        tables.is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_stats.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        tables.is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_stats.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        tables.is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        table_stats.row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        tables.is_table as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        table_stats.size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        tables.is_table as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        column_stats.partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        column_stats.is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        column_stats.clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        column_stats.is_clustered as `stats__clustering_fields__include`\n\n    from tables\n    join table_stats\n        on table_stats.table_catalog = tables.table_catalog\n        and table_stats.table_schema = tables.table_schema\n        and table_stats.table_name = tables.table_name\n    left join column_stats\n        on column_stats.table_catalog = tables.table_catalog\n        and column_stats.table_schema = tables.table_schema\n        and column_stats.shard_name = table_stats.latest_shard_name\n    left join columns\n        on columns.table_catalog = tables.table_catalog\n        and columns.table_schema = tables.table_schema\n        and columns.shard_name = table_stats.latest_shard_name\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.8779833, "supported_languages": null}, "macro.dbt_bigquery.bigquery__can_clone_table": {"name": "bigquery__can_clone_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\clone.sql", "original_file_path": "macros\\materializations\\clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__can_clone_table", "macro_sql": "{% macro bigquery__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.8799875, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_clone": {"name": "bigquery__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\clone.sql", "original_file_path": "macros\\materializations\\clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_clone", "macro_sql": "{% macro bigquery__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.8799875, "supported_languages": null}, "macro.dbt_bigquery.materialization_copy_bigquery": {"name": "materialization_copy_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\copy.sql", "original_file_path": "macros\\materializations\\copy.sql", "unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(ref_table.get('package'), ref_table.name, version=ref_table.get('version'))) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.8799875, "supported_languages": ["sql"]}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"name": "dbt_bigquery_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite', 'microbatch'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite', 'microbatch'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% if strategy == 'microbatch' %}\n    {% do bq_validate_microbatch_config(config) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_validate_microbatch_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.8819907, "supported_languages": null}, "macro.dbt_bigquery.source_sql_with_partition": {"name": "source_sql_with_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_bigquery.source_sql_with_partition", "macro_sql": "{% macro source_sql_with_partition(partition_by, source_sql) %}\n\n  {%- if partition_by.time_ingestion_partitioning %}\n    {{ return(wrap_with_time_ingestion_partitioning_sql(partition_by, source_sql, False))  }}\n  {% else %}\n    {{ return(source_sql)  }}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.8819907, "supported_languages": null}, "macro.dbt_bigquery.bq_create_table_as": {"name": "bq_create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_bigquery.bq_create_table_as", "macro_sql": "{% macro bq_create_table_as(partition_by, temporary, relation, compiled_code, language='sql') %}\n  {%- set _dbt_max_partition = declare_dbt_max_partition(this, partition_by, compiled_code, language) -%}\n  {% if partition_by.time_ingestion_partitioning and language == 'python' %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models do not support ingestion time partitioning\"\n    ) %}\n  {% elif partition_by.time_ingestion_partitioning and language == 'sql' %}\n    {#-- Create the table before inserting data as ingestion time partitioned tables can't be created with the transformed data --#}\n    {% do run_query(create_table_as(temporary, relation, compiled_code)) %}\n    {{ return(_dbt_max_partition + bq_insert_into_ingestion_time_partitioned_table_sql(relation, compiled_code)) }}\n  {% else %}\n    {{ return(_dbt_max_partition + create_table_as(temporary, relation, compiled_code, language)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.run_query", "macro.dbt.create_table_as", "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.8819907, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"name": "bq_generate_incremental_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions, incremental_predicates\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set build_sql = bq_generate_incremental_insert_overwrite_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% elif strategy == 'microbatch' %}\n\n    {% set build_sql = bq_generate_microbatch_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n    {% set build_sql = bq_generate_incremental_merge_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n    ) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro.dbt_bigquery.bq_generate_microbatch_build_sql", "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.8839936, "supported_languages": null}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"name": "materialization_incremental_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set incremental_predicates = config.get('predicates', default=none) or config.get('incremental_predicates', default=none) %}\n\n   -- grab current tables grants config for comparison later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if partition_by.copy_partitions is true and strategy not in ['insert_overwrite', 'microbatch'] %} {#-- We can't copy partitions with merge strategy --#}\n        {% set wrong_strategy_msg -%}\n        The 'copy_partitions' option requires the 'incremental_strategy' option to be set to 'insert_overwrite' or 'microbatch'.\n        {%- endset %}\n        {% do exceptions.raise_compiler_error(wrong_strategy_msg) %}\n\n  {% elif existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ bq_create_table_as(partition_by, True, tmp_relation, compiled_code, language) }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {#--  Add time ingestion pseudo column to destination column as not part of the 'schema' but still need it for actual data insertion --#}\n    {% if partition_by.time_ingestion_partitioning %}\n      {% set dest_columns = adapter.add_time_ingestion_partition_column(partition_by, dest_columns) %}\n    {% endif %}\n\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, partition_by.copy_partitions, incremental_predicates\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {%- if tmp_relation_exists -%}\n    {{ adapter.drop_relation(tmp_relation) }}\n  {%- endif -%}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.8874679, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.bigquery__create_csv_table": {"name": "bigquery__create_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.8894749, "supported_languages": null}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"name": "bigquery__reset_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.8894749, "supported_languages": null}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"name": "bigquery__load_csv_rows", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override, model['config']['delimiter']) }}\n\n  {% call statement() %}\n    alter table {{ this.render() }} set {{ bigquery_table_options(config, model) }}\n  {% endcall %}\n\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.8894749, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"name": "bigquery__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.8894749, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_columns": {"name": "bigquery__create_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.8894749, "supported_languages": null}, "macro.dbt_bigquery.bigquery__post_snapshot": {"name": "bigquery__post_snapshot", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.8894749, "supported_languages": null}, "macro.dbt_bigquery.materialization_table_bigquery": {"name": "materialization_table_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.8914785, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_bigquery.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n{%- set raw_partition_by = config.get('partition_by', none) -%}\n{%- set raw_cluster_by = config.get('cluster_by', none) -%}\n{%- set enable_list_inference = config.get('enable_list_inference', true) -%}\n{%- set intermediate_format = config.get('intermediate_format', none) -%}\n\n{%- set partition_config = adapter.parse_partition_by(raw_partition_by) %}\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\nspark.conf.set(\"enableListInference\", \"{{ enable_list_inference }}\")\n{% if intermediate_format %}\nspark.conf.set(\"intermediateFormat\", \"{{ intermediate_format }}\")\n{% endif %}\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\n# For writeMethod we need to use \"indirect\" if materializing a partitioned table\n# otherwise we can use \"direct\". Note that indirect will fail if the GCS bucket has a retention policy set on it.\n{%- if partition_config %}\n      {%- set write_method = 'indirect' -%}\n{%- else %}\n      {% set write_method = 'direct' -%}\n{%- endif %}\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"{{ write_method }}\") \\\n  .option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  {%- if partition_config is not none %}\n  {%- if partition_config.data_type | lower in ('date','timestamp','datetime') %}\n  .option(\"partitionField\", \"{{- partition_config.field -}}\") \\\n  {%- if partition_config.granularity is not none %}\n  .option(\"partitionType\", \"{{- partition_config.granularity| upper -}}\") \\\n  {%- endif %}\n  {%- endif %}\n  {%- endif %}\n  {%- if raw_cluster_by is not none %}\n  .option(\"clusteredFields\", \"{{- raw_cluster_by | join(',') -}}\") \\\n  {%- endif %}\n  .save(\"{{target_relation}}\")\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.8914785, "supported_languages": null}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"name": "bigquery__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.8914785, "supported_languages": null}, "macro.dbt_bigquery.materialization_view_bigquery": {"name": "materialization_view_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = bigquery__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.8914785, "supported_languages": ["sql"]}, "macro.dbt_bigquery.declare_dbt_max_partition": {"name": "declare_dbt_max_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\common.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\common.sql", "unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, compiled_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in compiled_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type_for_partition() }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.8960326, "supported_languages": null}, "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter": {"name": "predicate_for_avoid_require_partition_filter", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\common.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\common.sql", "unique_id": "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter", "macro_sql": "{% macro predicate_for_avoid_require_partition_filter(target='DBT_INTERNAL_DEST') %}\n\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- set predicate = none -%}\n\n    {% if partition_config and config.get('require_partition_filter') -%}\n        {%- set partition_field = partition_config.time_partitioning_field() if partition_config.time_ingestion_partitioning else partition_config.field -%}\n        {% set predicate %}\n            (\n                `{{ target }}`.`{{ partition_field }}` is null\n                or `{{ target }}`.`{{ partition_field }}` is not null\n            )\n        {% endset %}\n    {%- endif -%}\n\n    {{ return(predicate) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.8960326, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql": {"name": "bq_generate_incremental_insert_overwrite_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro_sql": "{% macro bq_generate_incremental_insert_overwrite_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% if partition_by is none %}\n      {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.8960326, "supported_languages": null}, "macro.dbt_bigquery.bq_copy_partitions": {"name": "bq_copy_partitions", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_copy_partitions", "macro_sql": "{% macro bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n\n  {% for partition in partitions %}\n    {% if partition_by.data_type == 'int64' %}\n      {% set partition = partition | as_text %}\n    {% elif partition_by.granularity == 'hour' %}\n      {% set partition = partition.strftime(\"%Y%m%d%H\") %}\n    {% elif partition_by.granularity == 'day' %}\n      {% set partition = partition.strftime(\"%Y%m%d\") %}\n    {% elif partition_by.granularity == 'month' %}\n      {% set partition = partition.strftime(\"%Y%m\") %}\n    {% elif partition_by.granularity == 'year' %}\n      {% set partition = partition.strftime(\"%Y\") %}\n    {% endif %}\n    {% set tmp_relation_partitioned = api.Relation.create(database=tmp_relation.database, schema=tmp_relation.schema, identifier=tmp_relation.table ~ '$' ~ partition, type=tmp_relation.type) %}\n    {% set target_relation_partitioned = api.Relation.create(database=target_relation.database, schema=target_relation.schema, identifier=target_relation.table ~ '$' ~ partition, type=target_relation.type) %}\n    {% do adapter.copy_table(tmp_relation_partitioned, target_relation_partitioned, \"table\") %}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.8960326, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_overwrite_sql": {"name": "bq_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_insert_overwrite_sql", "macro_sql": "{% macro bq_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n  {% if partitions is not none and partitions != [] %} {# static #}\n      {{ bq_static_insert_overwrite_sql(tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else %} {# dynamic #}\n      {{ bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.8960326, "supported_languages": null}, "macro.dbt_bigquery.bq_static_insert_overwrite_sql": {"name": "bq_static_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro_sql": "{% macro bq_static_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {% if partition_by.time_ingestion_partitioning and tmp_relation_exists -%}\n          select\n            {{ partition_by.insertable_time_partitioning_field() }},\n            * from {{ tmp_relation }}\n          {% elif tmp_relation_exists -%}\n            select\n            * from {{ tmp_relation }}\n          {%- elif partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n          {%- else -%}\n            {{sql}}\n          {%- endif %}\n\n        )\n      {%- endset -%}\n\n      {% if copy_partitions %}\n          {% do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n      {% else %}\n\n      {#-- In case we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"temporary table exists\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      -- 1. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header = not tmp_relation_exists) }};\n\n      {%- if tmp_relation_exists -%}\n      -- 2. clean up the temp table\n      drop table if exists {{ tmp_relation }};\n      {%- endif -%}\n\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.bq_copy_partitions", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.8960326, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql": {"name": "bq_dynamic_copy_partitions_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_copy_partitions_insert_overwrite_sql(\n  tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions\n  ) %}\n  {%- if tmp_relation_exists is false -%}\n  {# We run temp table creation in a separated script to move to partitions copy if it doesn't already exist #}\n    {%- call statement('create_tmp_relation_for_copy', language='sql') -%}\n      {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql')\n    }}\n    {%- endcall %}\n  {%- endif -%}\n  {%- set partitions_sql -%}\n    select distinct {{ partition_by.render_wrapped() }}\n    from {{ tmp_relation }}\n  {%- endset -%}\n  {%- set partitions = run_query(partitions_sql).columns[0].values() -%}\n  {# We copy the partitions #}\n  {%- do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) -%}\n  -- Clean up the temp table\n  drop table if exists {{ tmp_relation }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.bq_copy_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9011102, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql": {"name": "bq_dynamic_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) %}\n  {%- if copy_partitions is true %}\n     {{ bq_dynamic_copy_partitions_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else -%}\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type_for_partition() }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n       -- 1. create a temp table with model data\n        {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql') }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n      {%- set partition_field = partition_by.time_partitioning_field() if partition_by.time_ingestion_partitioning else partition_by.render_wrapped() -%}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              -- IGNORE NULLS: this needs to be aligned to _dbt_max_partition, which ignores null\n              array_agg(distinct {{ partition_field }} IGNORE NULLS)\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9011102, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql": {"name": "bq_generate_incremental_merge_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\merge.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\merge.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql", "macro_sql": "{% macro bq_generate_incremental_merge_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n) %}\n    {%- set source_sql -%}\n        {%- if tmp_relation_exists -%}\n        (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n        )\n        {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n            {%- if partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n            {%- else -%}\n            {{sql}}\n            {%- endif %}\n        )\n        {%- endif -%}\n    {%- endset -%}\n\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set avoid_require_partition_filter = predicate_for_avoid_require_partition_filter() -%}\n    {%- if avoid_require_partition_filter is not none -%}\n        {% do predicates.append(avoid_require_partition_filter) %}\n    {%- endif -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns, predicates) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9034982, "supported_languages": null}, "macro.dbt_bigquery.bq_validate_microbatch_config": {"name": "bq_validate_microbatch_config", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\microbatch.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\microbatch.sql", "unique_id": "macro.dbt_bigquery.bq_validate_microbatch_config", "macro_sql": "{% macro bq_validate_microbatch_config(config) %}\n  {% if config.get(\"partition_by\") is none %}\n    {% set missing_partition_msg -%}\n    The 'microbatch' strategy requires a `partition_by` config.\n    {%- endset %}\n    {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n  {% endif %}\n\n  {% if config.get(\"partition_by\").granularity != config.get('batch_size') %}\n    {% set invalid_partition_by_granularity_msg -%}\n    The 'microbatch' strategy requires a `partition_by` config with the same granularity as its configured `batch_size`.\n    Got:\n      `batch_size`: {{ config.get('batch_size') }}\n      `partition_by.granularity`: {{ config.get(\"partition_by\").granularity }}\n    {%- endset %}\n    {% do exceptions.raise_compiler_error(invalid_partition_by_granularity_msg) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9034982, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_microbatch_build_sql": {"name": "bq_generate_microbatch_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\microbatch.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\microbatch.sql", "unique_id": "macro.dbt_bigquery.bq_generate_microbatch_build_sql", "macro_sql": "{% macro bq_generate_microbatch_build_sql(\n      tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9034982, "supported_languages": null}, "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql": {"name": "wrap_with_time_ingestion_partitioning_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro_sql": "{% macro wrap_with_time_ingestion_partitioning_sql(partition_by, sql, is_nested) %}\n\n  select TIMESTAMP({{ partition_by.field }}) as {{ partition_by.insertable_time_partitioning_field() }}, * EXCEPT({{ partition_by.field }}) from (\n    {{ sql }}\n  ){%- if not is_nested -%};{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9034982, "supported_languages": null}, "macro.dbt_bigquery.get_quoted_with_types_csv": {"name": "get_quoted_with_types_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_quoted_with_types_csv", "macro_sql": "{% macro get_quoted_with_types_csv(columns) %}\n    {% set quoted = [] %}\n    {% for col in columns -%}\n        {%- do quoted.append(adapter.quote(col.name) ~ \" \" ~ col.data_type) -%}\n    {%- endfor %}\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9062707, "supported_languages": null}, "macro.dbt_bigquery.columns_without_partition_fields_csv": {"name": "columns_without_partition_fields_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro_sql": "{% macro columns_without_partition_fields_csv(partition_config, columns) -%}\n  {%- set columns_no_partition = partition_config.reject_partition_field_column(columns) -%}\n  {% set columns_names = get_quoted_with_types_csv(columns_no_partition) %}\n  {{ return(columns_names) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_quoted_with_types_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9062707, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql": {"name": "bq_insert_into_ingestion_time_partitioned_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro_sql": "{% macro bq_insert_into_ingestion_time_partitioned_table_sql(target_relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {{ sql_header if sql_header is not none }}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set dest_columns_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n  insert into {{ target_relation }} ({{ partition_by.insertable_time_partitioning_field() }}, {{ dest_columns_csv }})\n    {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, False) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9062707, "supported_languages": null}, "macro.dbt_bigquery.get_columns_with_types_in_query_sql": {"name": "get_columns_with_types_in_query_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro_sql": "{% macro get_columns_with_types_in_query_sql(select_sql) %}\n  {% set sql %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n    select * from (\n      {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n  {% endset %}\n  {{ return(adapter.get_columns_in_select_sql(sql)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9062707, "supported_languages": null}, "macro.dbt_bigquery.bigquery__resolve_model_name": {"name": "bigquery__resolve_model_name", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt_bigquery.bigquery__resolve_model_name", "macro_sql": "{% macro bigquery__resolve_model_name(input_model_name) -%}\n    {{ input_model_name | string | replace('`', '') | replace('\"', '\\\"') }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9062707, "supported_languages": null}, "macro.dbt_bigquery.cluster_by": {"name": "cluster_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\cluster.sql", "original_file_path": "macros\\relations\\cluster.sql", "unique_id": "macro.dbt_bigquery.cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.908311, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_relation": {"name": "bigquery__drop_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n    {% do adapter.drop_relation(relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.908311, "supported_languages": null}, "macro.dbt_bigquery.bigquery_options": {"name": "bigquery_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\options.sql", "original_file_path": "macros\\relations\\options.sql", "unique_id": "macro.dbt_bigquery.bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.908311, "supported_languages": null}, "macro.dbt_bigquery.partition_by": {"name": "partition_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\partition.sql", "original_file_path": "macros\\relations\\partition.sql", "unique_id": "macro.dbt_bigquery.partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.time_ingestion_partitioning -%}\n        partition by {{ partition_config.render_wrapped() }}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.908311, "supported_languages": null}, "macro.dbt_bigquery.bigquery__rename_relation": {"name": "bigquery__rename_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9098146, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql": {"name": "bigquery__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{ get_replace_sql(existing_relation, relation, sql) }}\n    {% else %}\n\n        alter materialized view {{ relation }}\n            set {{ bigquery_options(configuration_changes.options.context.as_ddl_dict()) }}\n\n    {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9098146, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes": {"name": "bigquery__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes", "macro_sql": "{% macro bigquery__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = adapter.describe_relation(existing_relation) %}\n    {% set _configuration_changes = existing_relation.materialized_view_config_changeset(_existing_materialized_view, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9098146, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql": {"name": "bigquery__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\materialized_view\\create.sql", "original_file_path": "macros\\relations\\materialized_view\\create.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_create_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = adapter.Relation.materialized_view_from_relation_config(config.model) -%}\n\n    create materialized view if not exists {{ relation }}\n    {% if materialized_view.partition %}{{ partition_by(materialized_view.partition) }}{% endif %}\n    {% if materialized_view.cluster %}{{ cluster_by(materialized_view.cluster.fields) }}{% endif %}\n    {{ bigquery_options(materialized_view.options.as_ddl_dict()) }}\n    as {{ sql }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9098146, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_materialized_view": {"name": "bigquery__drop_materialized_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\materialized_view\\drop.sql", "original_file_path": "macros\\relations\\materialized_view\\drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_materialized_view", "macro_sql": "{% macro bigquery__drop_materialized_view(relation) %}\n    drop materialized view if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9098146, "supported_languages": null}, "macro.dbt_bigquery.bigquery__refresh_materialized_view": {"name": "bigquery__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\materialized_view\\refresh.sql", "original_file_path": "macros\\relations\\materialized_view\\refresh.sql", "unique_id": "macro.dbt_bigquery.bigquery__refresh_materialized_view", "macro_sql": "{% macro bigquery__refresh_materialized_view(relation) %}\n    call bq.refresh_materialized_view('{{ relation.database }}.{{ relation.schema }}.{{ relation.identifier }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9098146, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_replace_materialized_view_as_sql": {"name": "bigquery__get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\materialized_view\\replace.sql", "original_file_path": "macros\\relations\\materialized_view\\replace.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_replace_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_replace_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = adapter.Relation.materialized_view_from_relation_config(config.model) -%}\n\n    create or replace materialized view if not exists {{ relation }}\n    {% if materialized_view.partition %}{{ partition_by(materialized_view.partition) }}{% endif %}\n    {% if materialized_view.cluster %}{{ cluster_by(materialized_view.cluster.fields) }}{% endif %}\n    {{ bigquery_options(materialized_view.options.as_ddl_dict()) }}\n    as {{ sql }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9118469, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_table": {"name": "bigquery__drop_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\table\\drop.sql", "original_file_path": "macros\\relations\\table\\drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_table", "macro_sql": "{% macro bigquery__drop_table(relation) %}\n    drop table if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9118469, "supported_languages": null}, "macro.dbt_bigquery.bigquery_table_options": {"name": "bigquery_table_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\table\\options.sql", "original_file_path": "macros\\relations\\table\\options.sql", "unique_id": "macro.dbt_bigquery.bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9118469, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_rename_table_sql": {"name": "bigquery__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\table\\rename.sql", "original_file_path": "macros\\relations\\table\\rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_rename_table_sql", "macro_sql": "{%- macro bigquery__get_rename_table_sql(relation, new_name) -%}\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9118469, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_view": {"name": "bigquery__drop_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\view\\drop.sql", "original_file_path": "macros\\relations\\view\\drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_view", "macro_sql": "{% macro bigquery__drop_view(relation) %}\n    drop view if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9118469, "supported_languages": null}, "macro.dbt_bigquery.bigquery_view_options": {"name": "bigquery_view_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\view\\options.sql", "original_file_path": "macros\\relations\\view\\options.sql", "unique_id": "macro.dbt_bigquery.bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9118469, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_rename_view_sql": {"name": "bigquery__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\view\\rename.sql", "original_file_path": "macros\\relations\\view\\rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_rename_view_sql", "macro_sql": "{%- macro bigquery__get_rename_view_sql(relation, new_name) -%}\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9118469, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_view": {"name": "bigquery__create_or_replace_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_view", "macro_sql": "{% macro bigquery__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt_bigquery.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9138503, "supported_languages": null}, "macro.dbt_bigquery.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt_bigquery.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9138503, "supported_languages": null}, "macro.dbt_bigquery.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt_bigquery.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9138503, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_append": {"name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9138503, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_concat": {"name": "bigquery__array_concat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9138503, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_construct": {"name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.915853, "supported_languages": null}, "macro.dbt_bigquery.bigquery__bool_or": {"name": "bigquery__bool_or", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt_bigquery.bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.915853, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date": {"name": "bigquery__date", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\date.sql", "original_file_path": "macros\\utils\\date.sql", "unique_id": "macro.dbt_bigquery.bigquery__date", "macro_sql": "{% macro bigquery__date(year, month, day) -%}\n    date({{ year }}, {{ month }}, {{ day }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.915853, "supported_languages": null}, "macro.dbt_bigquery.bigquery__dateadd": {"name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt_bigquery.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.915853, "supported_languages": null}, "macro.dbt_bigquery.bigquery__datediff": {"name": "bigquery__datediff", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt_bigquery.bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.915853, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date_trunc": {"name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.915853, "supported_languages": null}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"name": "bigquery__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.915853, "supported_languages": null}, "macro.dbt_bigquery.bigquery__except": {"name": "bigquery__except", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt_bigquery.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.915853, "supported_languages": null}, "macro.dbt_bigquery.bigquery__format_column": {"name": "bigquery__format_column", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\get_columns_spec_ddl.sql", "original_file_path": "macros\\utils\\get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__format_column", "macro_sql": "{% macro bigquery__format_column(column) -%}\n  {% set data_type = column.data_type %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9178696, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_schema_sql": {"name": "bigquery__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\get_columns_spec_ddl.sql", "original_file_path": "macros\\utils\\get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_schema_sql", "macro_sql": "{% macro bigquery__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {% for col in columns.values() %}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n\n    {%- set columns = adapter.nest_column_data_types(columns) -%}\n    {{ return(dbt.default__get_empty_schema_sql(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9178696, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_select_subquery": {"name": "bigquery__get_select_subquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\get_columns_spec_ddl.sql", "original_file_path": "macros\\utils\\get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_select_subquery", "macro_sql": "{% macro bigquery__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9178696, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_column_names": {"name": "bigquery__get_column_names", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\get_columns_spec_ddl.sql", "original_file_path": "macros\\utils\\get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_column_names", "macro_sql": "{% macro bigquery__get_column_names() %}\n  {#- loop through nested user_provided_columns to get column names -#}\n    {%- set user_provided_columns = adapter.nest_column_data_types(model['columns']) -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.919616, "supported_languages": null}, "macro.dbt_bigquery.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt_bigquery.bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.919616, "supported_languages": null}, "macro.dbt_bigquery.bigquery__intersect": {"name": "bigquery__intersect", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt_bigquery.bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9202206, "supported_languages": null}, "macro.dbt_bigquery.bigquery__listagg": {"name": "bigquery__listagg", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt_bigquery.bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9202206, "supported_languages": null}, "macro.dbt_bigquery.bigquery__position": {"name": "bigquery__position", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt_bigquery.bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9202206, "supported_languages": null}, "macro.dbt_bigquery.bigquery__right": {"name": "bigquery__right", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt_bigquery.bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9210296, "supported_languages": null}, "macro.dbt_bigquery.bigquery__safe_cast": {"name": "bigquery__safe_cast", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n{%- if type.lower().startswith('array') and field is iterable and (field is not string and field is not mapping) and field | length > 0 -%}\n    {#-- Extract nested type from 'array<nested_type>' --#}\n    {% set nested_type = type.lower()[6:-1] %}\n    {#-- BigQuery does not support direct casts to arrays. instead, each element must be cast individually + reaggregated into an array --#}\n    {%- if cast_from_string_unsupported_for(nested_type)  %}\n        (select array_agg(safe_cast(i as {{ nested_type }})) from unnest([\n            {%- for nested_field in field %}\n                {{ nested_field.strip('\"').strip(\"'\") }}{{ ',' if not loop.last }}\n            {%- endfor %}\n        ]) i)\n    {%- else -%}\n        (select array_agg(safe_cast(i as {{nested_type}})) from unnest({{field}}) i)\n    {%- endif -%}\n\n{%- elif type.lower() == 'json' and field is mapping -%}\n    safe_cast(json {{ dbt.string_literal(tojson(field)) }} as json)\n{%- elif cast_from_string_unsupported_for(type) and field is string -%}\n    safe_cast({{field.strip('\"').strip(\"'\")}} as {{type}})\n{%- else -%}\n    safe_cast({{field}} as {{type}})\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.cast_from_string_unsupported_for", "macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9213507, "supported_languages": null}, "macro.dbt_bigquery.cast_from_string_unsupported_for": {"name": "cast_from_string_unsupported_for", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt_bigquery.cast_from_string_unsupported_for", "macro_sql": "{% macro cast_from_string_unsupported_for(type) %}\n    {{ return(type.lower().startswith('struct') or type.lower() == 'geography') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9213507, "supported_languages": null}, "macro.dbt_bigquery.bigquery__split_part": {"name": "bigquery__split_part", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt_bigquery.bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1 + {{ part_number }}\n        )]\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9213507, "supported_languages": null}, "macro.dbt_bigquery.bigquery__string_literal": {"name": "bigquery__string_literal", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\string_literal.sql", "original_file_path": "macros\\utils\\string_literal.sql", "unique_id": "macro.dbt_bigquery.bigquery__string_literal", "macro_sql": "{%- macro bigquery__string_literal(value) -%}\n    '''{{ value }}'''\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9213507, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9213507, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"name": "bigquery__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9213507, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {"name": "bigquery__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat", "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9213507, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9213507, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9213507, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9213507, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9213507, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9213507, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9213507, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9213507, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9259539, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9259539, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9259539, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9259539, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9259539, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9259539, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9259539, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9259539, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9259539, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9259539, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9259539, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9259539, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9259539, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9259539, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9259539, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9259539, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9259539, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9259539, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9259539, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9259539, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9259539, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9259539, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9259539, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9259539, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9259539, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9356196, "supported_languages": null}, "macro.dbt.collect_freshness_custom_sql": {"name": "collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.collect_freshness_custom_sql", "macro_sql": "{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\n  {{ return(adapter.dispatch('collect_freshness_custom_sql', 'dbt')(source, loaded_at_query))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness_custom_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9356196, "supported_languages": null}, "macro.dbt.default__collect_freshness_custom_sql": {"name": "default__collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.default__collect_freshness_custom_sql", "macro_sql": "{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\n  {% call statement('collect_freshness_custom_sql', fetch_result=True, auto_begin=False) -%}\n  with source_query as (\n    {{ loaded_at_query }}\n  )\n  select\n    (select * from source_query) as max_loaded_at,\n    {{ current_timestamp() }} as snapshotted_at\n  {% endcall %}\n  {{ return(load_result('collect_freshness_custom_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9371006, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9371006, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9371006, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9371006, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9371006, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9371006, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9371006, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9371006, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9371006, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9371006, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9371006, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9371006, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9371006, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9371006, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9371006, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9371006, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9371006, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9371006, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9371006, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9371006, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9371006, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9371006, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9371006, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9371006, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9371006, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.944003, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.944003, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.944003, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.944003, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.944003, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.944003, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.944003, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.944003, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9460087, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9460087, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9460087, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9460087, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9460087, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9480307, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9480307, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9480307, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9480307, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9480307, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9480307, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9480307, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9480307, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9480307, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9480307, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9480307, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9480307, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9480307, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ sql }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9480307, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9480307, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9480307, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9530213, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9536686, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.default__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9536686, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9536686, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9536686, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9536686, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9536686, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\validate_sql.sql", "original_file_path": "macros\\adapters\\validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9536686, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\validate_sql.sql", "original_file_path": "macros\\adapters\\validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9556758, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9556758, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9556758, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9556758, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9556758, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9598994, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9598994, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9598994, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.961904, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.961904, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.961904, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.961904, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.961904, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.961904, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9639082, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9639082, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9639082, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9639082, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9639082, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9659126, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9659126, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9659126, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9659126, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9659126, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9659126, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9659126, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9659126, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.969634, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9708836, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9708836, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9708836, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9708836, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9708836, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table.sql", "original_file_path": "macros\\materializations\\models\\table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  {% do create_indexes(intermediate_relation) %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9758463, "supported_languages": ["sql"]}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view.sql", "original_file_path": "macros\\materializations\\models\\view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9778793, "supported_languages": ["sql"]}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "original_file_path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9778793, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "original_file_path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9778793, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9778793, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9778793, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9778793, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9778793, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9778793, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9778793, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9778793, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9778793, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n      {% set relation_for_indexes = target_relation %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set relation_for_indexes = intermediate_relation %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set relation_for_indexes = temp_relation %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(relation_for_indexes) %}\n  {% endif %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9901614, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9901614, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9901614, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set source_unique_key = (\"DBT_INTERNAL_SOURCE.\" ~ unique_key) | trim %}\n\t    {% set target_unique_key = (\"DBT_INTERNAL_DEST.\" ~ unique_key) | trim %}\n\t    {% set unique_key_match = equals(source_unique_key, target_unique_key) | trim %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9921653, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9921653, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is string %}\n        {% set unique_key = [unique_key] %}\n        {% endif %}\n\n        {%- set unique_key_str = unique_key|join(', ') -%}\n\n        delete from {{ target }} as DBT_INTERNAL_DEST\n        where ({{ unique_key_str }}) in (\n            select distinct {{ unique_key_str }}\n            from {{ source }} as DBT_INTERNAL_SOURCE\n        )\n        {%- if incremental_predicates %}\n            {% for predicate in incremental_predicates %}\n                and {{ predicate }}\n            {% endfor %}\n        {%- endif -%};\n\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9941685, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9941685, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9941685, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9956717, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9956717, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9956717, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9956717, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9956717, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9956717, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9956717, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9956717, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9956717, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9956717, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9956717, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9956717, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9956717, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9956717, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9956717, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754835.9956717, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0028806, "supported_languages": null}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0038004, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0058153, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0058153, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0058153, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0058153, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0058153, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0058153, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0058153, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0058153, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0058153, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0058153, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0058153, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0058153, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0099738, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0099738, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0099738, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0099738, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0099738, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0099738, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0099738, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0099738, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0099738, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n    {% if strategy.hard_deletes == 'new_record' %}\n        {% set new_scd_id = snapshot_hash_arguments([columns.dbt_scd_id, snapshot_get_time()]) %}\n    {% endif %}\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n\t\t{% set source_unique_key = columns.dbt_valid_to | trim %}\n\t\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\n\t\t{# The exact equals semantics between NULL values depends on the current behavior flag set. Also, update records if the source field is null #}\n                ( {{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null )\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and (\n               {{ strategy.row_changed }} {%- if strategy.hard_deletes == 'new_record' -%} or snapshotted_data.{{ columns.dbt_is_deleted }} = 'True' {% endif %}\n            )\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}  {%- if strategy.hard_deletes == 'new_record' -%} or snapshotted_data.{{ columns.dbt_is_deleted }} = 'True' {% endif %}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {%- for col in source_sql_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            {{ new_scd_id }} as {{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments", "macro.dbt.snapshot_get_time", "macro.dbt.unique_key_fields", "macro.dbt.equals", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0178878, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0178878, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0178878, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0193913, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0208802, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0208802, "supported_languages": null}, "macro.dbt.get_dbt_valid_to_current": {"name": "get_dbt_valid_to_current", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_dbt_valid_to_current", "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0208802, "supported_languages": null}, "macro.dbt.unique_key_fields": {"name": "unique_key_fields", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_fields", "macro_sql": "{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0208802, "supported_languages": null}, "macro.dbt.unique_key_join_on": {"name": "unique_key_join_on", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_join_on", "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n\t    {% set source_unique_key = (identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {% set target_unique_key = (from_identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {{ equals(source_unique_key, target_unique_key) }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.023134, "supported_languages": null}, "macro.dbt.unique_key_is_null": {"name": "unique_key_is_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_is_null", "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.023134, "supported_languages": null}, "macro.dbt.unique_key_is_not_null": {"name": "unique_key_is_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_is_not_null", "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.023134, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.027745, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.027745, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n\t{% set source_unique_key = (\"DBT_INTERNAL_DEST.\" ~ columns.dbt_valid_to) | trim %}\n\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\tand ({{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null)\n\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.027745, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.029748, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.029748, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.031751, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.031751, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.031751, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.031751, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.033754, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.035757, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0367908, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.037903, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.037903, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.037903, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n  {% set limit = config.get('limit') %}\n\n  {% set sql_with_limit %}\n    {{ get_limit_subquery_sql(sql, limit) }}\n  {% endset %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql_with_limit) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {# Since the test failures have already been saved to the database, reuse that result rather than querying again #}\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql_with_limit %}\n\n  {% endif %}\n\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {# The limit has already been included above, and we do not want to duplicate it again. We also want to be safe for macro overrides treating `limit` as a required parameter. #}\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit=none)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0397055, "supported_languages": ["sql"]}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\unit.sql", "original_file_path": "macros\\materializations\\tests\\unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.042256, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.042256, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.042256, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0440018, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0440018, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n\n        {#\n            We want to get the string of the returned relation by calling .render() in order to skip sample/empty\n            mode rendering logic. However, people override the default ref macro, and often return a string instead\n            of a relation (like the ref macro does by default). Thus, to make sure we dont blow things up, we have\n            to ensure the resolved relation has a .render() method.\n        #}\n        {%- if resolved.render is defined and resolved.render is callable -%}\n            {%- set resolved = resolved.render() -%}\n        {%- endif -%}\n\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0440018, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0440018, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.046005, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.046005, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.046005, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create.sql", "original_file_path": "macros\\relations\\create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.046005, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create.sql", "original_file_path": "macros\\relations\\create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.046005, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_backup.sql", "original_file_path": "macros\\relations\\create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.046005, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_backup.sql", "original_file_path": "macros\\relations\\create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0480356, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_intermediate.sql", "original_file_path": "macros\\relations\\create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0480356, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_intermediate.sql", "original_file_path": "macros\\relations\\create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0480356, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0480356, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0480356, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0480356, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0480356, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0500393, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop_backup.sql", "original_file_path": "macros\\relations\\drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0500393, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop_backup.sql", "original_file_path": "macros\\relations\\drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0500393, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0500393, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0500393, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0500393, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0500393, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename_intermediate.sql", "original_file_path": "macros\\relations\\rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0520422, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename_intermediate.sql", "original_file_path": "macros\\relations\\rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0520422, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\replace.sql", "original_file_path": "macros\\relations\\replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.053232, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\replace.sql", "original_file_path": "macros\\relations\\replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation.type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.053232, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\schema.sql", "original_file_path": "macros\\relations\\schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.053232, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\schema.sql", "original_file_path": "macros\\relations\\schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.053232, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.053232, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.053232, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0560632, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0560632, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0560632, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0581005, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0581005, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0581005, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0581005, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0581005, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0581005, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0581005, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\create.sql", "original_file_path": "macros\\relations\\materialized_view\\create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.060104, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\create.sql", "original_file_path": "macros\\relations\\materialized_view\\create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.060104, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\drop.sql", "original_file_path": "macros\\relations\\materialized_view\\drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.060104, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\drop.sql", "original_file_path": "macros\\relations\\materialized_view\\drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.060104, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\refresh.sql", "original_file_path": "macros\\relations\\materialized_view\\refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.060104, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\refresh.sql", "original_file_path": "macros\\relations\\materialized_view\\refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.060104, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\rename.sql", "original_file_path": "macros\\relations\\materialized_view\\rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.060104, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\rename.sql", "original_file_path": "macros\\relations\\materialized_view\\rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.060104, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\replace.sql", "original_file_path": "macros\\relations\\materialized_view\\replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.060104, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\replace.sql", "original_file_path": "macros\\relations\\materialized_view\\replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.060104, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0621078, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0621078, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0621078, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0621078, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.064111, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.064111, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.064111, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\drop.sql", "original_file_path": "macros\\relations\\table\\drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.064111, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\drop.sql", "original_file_path": "macros\\relations\\table\\drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.064111, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\rename.sql", "original_file_path": "macros\\relations\\table\\rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.064111, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\rename.sql", "original_file_path": "macros\\relations\\table\\rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.064111, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\replace.sql", "original_file_path": "macros\\relations\\table\\replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.065614, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\replace.sql", "original_file_path": "macros\\relations\\table\\replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.065614, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.065614, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.065614, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.065614, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.065614, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\drop.sql", "original_file_path": "macros\\relations\\view\\drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.065614, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\drop.sql", "original_file_path": "macros\\relations\\view\\drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.065614, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\rename.sql", "original_file_path": "macros\\relations\\view\\rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.06764, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\rename.sql", "original_file_path": "macros\\relations\\view\\rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.06764, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.06764, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.06764, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0695593, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0695593, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0695593, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0695593, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0731277, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0731277, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0731277, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0731277, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.075132, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.075132, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.075132, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0756347, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0756347, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0756347, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0756347, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0756347, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0756347, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0756347, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast.sql", "original_file_path": "macros\\utils\\cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0756347, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast.sql", "original_file_path": "macros\\utils\\cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0756347, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0776658, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0776658, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0776658, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0776658, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0776658, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0776658, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0776658, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0776658, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0776658, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0776658, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0776658, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0776658, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0776658, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0776658, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0776658, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0776658, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0776658, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0776658, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date.sql", "original_file_path": "macros\\utils\\date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0776658, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date.sql", "original_file_path": "macros\\utils\\date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0776658, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0776658, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0776658, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0776658, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0776658, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0776658, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0776658, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0776658, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0776658, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0776658, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0776658, "supported_languages": null}, "macro.dbt.equals": {"name": "equals", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\equals.sql", "original_file_path": "macros\\utils\\equals.sql", "unique_id": "macro.dbt.equals", "macro_sql": "{% macro equals(expr1, expr2) %}\n    {{ return(adapter.dispatch('equals', 'dbt') (expr1, expr2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0776658, "supported_languages": null}, "macro.dbt.default__equals": {"name": "default__equals", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\equals.sql", "original_file_path": "macros\\utils\\equals.sql", "unique_id": "macro.dbt.default__equals", "macro_sql": "{% macro default__equals(expr1, expr2) -%}\n{%- if adapter.behavior.enable_truthy_nulls_equals_macro.no_warn %}\n    case when (({{ expr1 }} = {{ expr2 }}) or ({{ expr1 }} is null and {{ expr2 }} is null))\n        then 0\n        else 1\n    end = 0\n{%- else -%}\n    ({{ expr1 }} = {{ expr2 }})\n{%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.085269, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.085269, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.085269, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0862513, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0862513, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0872588, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0876105, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0876105, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0876105, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0876105, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0876105, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0876105, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0876105, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0876105, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0876105, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0876105, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0876105, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0876105, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0876105, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0876105, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0876105, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0876105, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0876105, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0876105, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0876105, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0876105, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0876105, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0876105, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0876105, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0876105, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0876105, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0876105, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0876105, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0876105, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0876105, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0876105, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761754836.0876105, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs\\overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {"model.dbt_common_gold.dim_fecha": [{"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "dim_fecha", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\dim_fecha\\dim_fecha.sql", "original_file_path": "models\\dim\\dim_fecha\\dim_fecha.sql", "unique_id": "model.dbt_common_gold.dim_fecha", "fqn": ["dbt_common_gold", "dim", "dim_fecha", "dim_fecha"], "alias": "Al_T_Dim_Calendar", "checksum": {"name": "sha256", "checksum": "85988626c208c7dd950ffd2a61b0b704d8ab3e9a9fe3ad4b7449e7cabcc924fa"}, "config": {"enabled": false, "alias": "Al_T_Dim_Calendar", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["Date"]}, "tags": [], "description": "Tabla de gold", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\dim_fecha\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "enabled": false, "materialized": "table", "alias": "Al_T_Dim_Calendar", "cluster_by": ["Date"]}, "created_at": 1761754836.7967203, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_Calendar`", "raw_code": "SELECT  \nDate,\nDateInt,\nYear,\nYearMonth,\nMonth,\n--NOM_MES         as MonthName,\nDay,\n--NOM_DIA         as DayName,\nDayWeek,\nSemester,\nQuarter,\nWeek,\nWeekStart,\nWeekEnd\n\n-- CAMPOS ODS  \n, ValidStartDate \n, ValidEndDate\n-- AUDITORIA\n      , CURRENT_TIMESTAMP() as CreateDate\n      , 'DBT' CreateUser\n      , null ModifDate\n      , null ModifUser\n      , null DeleteDate\n      , null DeleteUser\nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_Calendar') }}", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_Calendar"]], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}], "model.dbt_common_gold.dim_shapes": [{"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "dim_shapes", "resource_type": "model", "package_name": "dbt_common_gold", "path": "dim\\dim_shapes\\dim_shapes.sql", "original_file_path": "models\\dim\\dim_shapes\\dim_shapes.sql", "unique_id": "model.dbt_common_gold.dim_shapes", "fqn": ["dbt_common_gold", "dim", "dim_shapes", "dim_shapes"], "alias": "Al_T_Dim_Shapes", "checksum": {"name": "sha256", "checksum": "636d8b3434f4ae6aa27d615e79dcfcbd1c1f69bf59315fea7d500ce30a2c376b"}, "config": {"enabled": false, "alias": "Al_T_Dim_Shapes", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["IdLine", "IdItinerary"]}, "tags": [], "description": "Tabla de gold", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\dim\\dim_shapes\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "enabled": false, "materialized": "table", "alias": "Al_T_Dim_Shapes", "cluster_by": ["IdLine", "IdItinerary"]}, "created_at": 1761754836.8107889, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Dim_Shapes`", "raw_code": "SELECT \nIdCompany,\nIdLine,\nIdItinerary, \nLatitude,\nLongitude,\nIdSequence,\nDistTraveled,\nId,\nGeom,\nValid,\nCreateDateOrigin\n-- CAMPOS ODS  \n, ValidStartDate \n, ValidEndDate\n-- AUDITORIA\n      , CURRENT_TIMESTAMP() as CreateDate\n      , 'DBT' CreateUser\n      , null ModifDate\n      , null ModifUser\n      , null DeleteDate\n      , null DeleteUser\nFROM {{ source('bq_dim_silver_com', 'Al_T_Dim_Shapes') }}", "language": "sql", "refs": [], "sources": [["bq_dim_silver_com", "Al_T_Dim_Shapes"]], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}], "model.dbt_common_gold.fact_xsercp": [{"database": "prj-gld-dev-westeu-01", "schema": "bq_com_test_westeu_01", "name": "fact_xsercp", "resource_type": "model", "package_name": "dbt_common_gold", "path": "fact\\fact_xsercp\\fact_xsercp.sql", "original_file_path": "models\\fact\\fact_xsercp\\fact_xsercp.sql", "unique_id": "model.dbt_common_gold.fact_xsercp", "fqn": ["dbt_common_gold", "fact", "fact_xsercp", "fact_xsercp"], "alias": "Al_T_Fact_Planner", "checksum": {"name": "sha256", "checksum": "27008c37d77fa128d2208c2710ed944f97428c1239718ba356b4c02098c7db4b"}, "config": {"enabled": false, "alias": "Al_T_Fact_Planner", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["TravelDate", "IdLine", "LicensePlate"]}, "tags": [], "description": "Tabla de gold", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_common_gold://models\\fact\\fact_xsercp\\schema.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "enabled": false, "materialized": "table", "alias": "Al_T_Fact_Planner", "cluster_by": ["TravelDate", "IdLine", "LicensePlate"]}, "created_at": 1761754836.8477833, "relation_name": "`prj-gld-dev-westeu-01`.`bq_com_test_westeu_01`.`Al_T_Fact_Planner`", "raw_code": "SELECT \n      -- estructura operativa\n      IdCountry, \n      IdZone, \n      IdDivision, \n      IdUZ, \n      IdAxis,\n      IDZoneManagement,\n      -- horas viaje\n      TravelDate,\n      TravelDateINT,\n      DepartureDate, \n      ArrivalDate,\n      DepartureDateUTC, \n      ArrivalDateUTC, \n      -- empresa\n      IdCompanyLine,\n      -- servicio\n      Registration,\n      LineCategory,\n      IdLine,     \n      IdExpedition,\n      IdItinerary,\n      Discretion,\n      Source,\n      Destination,\n      DepartureTime, \n      ArrivalTime ,\n      Service,\n      NumberDays,\n      Outbound,\n      Time,\n      KMS,\n      -- coche\n      Vehicle,\n      LicensePlate,  \n      CompanyVehicle,\n      Reinforcement,\n      Coach,\n      CoachShift,\n      -- conductor 1\n      IdDriver,\n      IdCompanyDriver,\n      DriverShift,     \n      -- conductor 2\n      IdDriver2,\n      IdCompanyDriver2\n\n-- CAMPOS ODS  \n, ValidStartDate \n, ValidEndDate\n-- AUDITORIA\n      , CURRENT_TIMESTAMP() as CreateDate\n      , 'DBT' CreateUser\n      , null ModifDate\n      , null ModifUser\n      , null DeleteDate\n      , null DeleteUser\nFROM {{ source('bq_fact_silver_com', 'Al_T_Fact_Planner') }}", "language": "sql", "refs": [], "sources": [["bq_fact_silver_com", "Al_T_Fact_Planner"]], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}]}, "parent_map": {"model.dbt_common_gold.Al_T_Agg_Activity_Date": ["source.dbt_common_gold.bq_agg_silver_com.Al_T_Agg_Activity_Date"], "model.dbt_common_gold.Al_T_Dim_AlsaProviders": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_AlsaProviders"], "model.dbt_common_gold.Al_T_Dim_Employee": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Employee"], "model.dbt_common_gold.Al_T_Dim_Gender": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Gender"], "model.dbt_common_gold.Al_T_Dim_JourneyLines": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Journey", "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Route"], "model.dbt_common_gold.Al_T_Dim_MaritalStatus": ["source.dbt_common_gold.bq_dim_silver_com_marital.Al_T_Dim_MaritalStatus"], "model.dbt_common_gold.Al_T_Dim_RouteJourneys": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Journey", "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Route"], "model.dbt_common_gold.Al_T_Dim_RutasAlsaSEO": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_RutasAlsaSEO"], "model.dbt_common_gold.Al_T_Dim_Systems": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Systems"], "model.dbt_common_gold.Al_T_Dim_TownAlias": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_TownAlias"], "model.dbt_common_gold.Al_T_Dim_Translations": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Translations"], "model.dbt_common_gold.dim_coche": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Vehicle"], "model.dbt_common_gold.dim_combustible": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Fuel"], "model.dbt_common_gold.dim_concesion": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Concession"], "model.dbt_common_gold.dim_conductor": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Driver"], "model.dbt_common_gold.dim_division": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Division"], "model.dbt_common_gold.dim_ejes": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Axis"], "model.dbt_common_gold.dim_empresas": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Company"], "model.dbt_common_gold.dim_evolcoche": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_VehicleEvol"], "model.dbt_common_gold.dim_evolcochetaller": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_VehicleGarageEvol"], "model.dbt_common_gold.dim_evolconductorempresa": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_DriverCompanyEvol"], "model.dbt_common_gold.dim_evolempresazona": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_CompanyZoneEvol"], "model.dbt_common_gold.dim_evollinea": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_LineEvol"], "model.dbt_common_gold.dim_evollineaEO": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_LineEvolOS"], "model.dbt_common_gold.dim_expedicion": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Expedition"], "model.dbt_common_gold.dim_fechascierre": [], "model.dbt_common_gold.dim_gc": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_ContractGroup"], "model.dbt_common_gold.dim_itinerario": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Itinerary"], "model.dbt_common_gold.dim_linea": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Line"], "model.dbt_common_gold.dim_marca": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Brand"], "model.dbt_common_gold.dim_modelo": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Model"], "model.dbt_common_gold.dim_paradas": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Stops"], "model.dbt_common_gold.dim_pueblo": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Town"], "model.dbt_common_gold.dim_servicio": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_ServiceType"], "model.dbt_common_gold.dim_subsituacion": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_ServiceSubType"], "model.dbt_common_gold.dim_tipotransporte": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_TypeTrans"], "model.dbt_common_gold.dim_uz": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_ZonalUnit"], "model.dbt_common_gold.dim_zonas": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Zone"], "model.dbt_common_gold.Al_T_Fact_CompetitorsPricing": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Fact_CompetitorsPricing"], "model.dbt_common_gold.Al_T_Fact_PositionsControl": ["source.dbt_common_gold.bq_fact_silver_com.Al_T_Agg_PositionsControlGCP", "source.dbt_common_gold.bq_fact_silver_com.Al_T_Agg_PositionsControlORA", "source.dbt_common_gold.bq_fact_silver_com.Al_T_Dim_Systems"], "model.dbt_common_gold.Al_T_Fact_Sales": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Fact_Sales"], "model.dbt_common_gold.Al_T_Fact_SalesSearches": ["model.dbt_common_gold.Al_T_Dim_RouteJourneys", "source.dbt_common_gold.bq_fact_silver_com.Al_T_Fact_JourneySales", "source.dbt_common_gold.bq_fact_silver_com.Al_T_Fact_JourneySearches"], "model.dbt_common_gold.Al_T_Fact_ServiceActivity_PW": ["source.dbt_common_gold.bq_fact_silver_com.Al_T_Fact_ServiceActivity_PW"], "model.dbt_common_gold.Al_T_Fact_TravelSuggestions": ["source.dbt_common_gold.bq_dim_gld_com.Al_T_Dim_JourneyLines", "source.dbt_common_gold.bq_dim_gld_com.Al_T_Dim_Line", "source.dbt_common_gold.bq_dim_gld_com.Al_T_Dim_RouteJourneys", "source.dbt_common_gold.bq_dim_gld_com.Al_T_Dim_TownAlias", "source.dbt_common_gold.bq_dim_gld_gemini.Al_T_Dim_MunicipalityTags", "source.dbt_common_gold.bq_dim_gld_gemini.Al_T_Dim_MunicipalityTowns", "source.dbt_common_gold.bq_fact_gld_com.Al_T_Fact_SalesSearches", "source.dbt_common_gold.bq_fact_gld_gemini.Al_T_Fact_TaggedMunicipalities"], "model.dbt_common_gold.Al_T_Fact_TravelSuggestionsByTown": ["model.dbt_common_gold.Al_T_Dim_RouteJourneys", "model.dbt_common_gold.Al_T_Dim_RutasAlsaSEO", "model.dbt_common_gold.Al_T_Fact_SalesSearches", "model.dbt_common_gold.dim_pueblo", "source.dbt_common_gold.bq_dim_gld_gemini.Al_T_Dim_MunicipalityTags", "source.dbt_common_gold.bq_dim_gld_gemini.Al_T_Dim_MunicipalityTowns", "source.dbt_common_gold.bq_fact_gld_gemini.Al_T_Fact_TaggedMunicipalities"], "model.dbt_common_gold.Al_T_Fact_VehicleOccupancy": ["source.dbt_common_gold.bq_dim_silver_com.Al_T_Fact_VehicleOccupancy"], "model.dbt_common_gold.Al_T_Lkt_SecondaryVehicleProvider": ["source.dbt_common_gold.bq_com_slv.Al_T_Lkt_SecondaryVehicleProvider"], "model.dbt_common_gold.Al_T_Lkt_VehicleEvolLV": ["source.dbt_common_gold.bq_com_slv.Al_T_Lkt_VehicleEvolLV_Stg1"], "source.dbt_common_gold.bq_agg_silver_com.Al_T_Agg_Activity_Date": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Vehicle": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Line": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Stops": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Shapes": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Zone": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Division": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_ZonalUnit": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Axis": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Company": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Brand": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Model": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Fuel": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_ContractGroup": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_LineEvol": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_LineEvolOS": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_CompanyZoneEvol": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_VehicleEvol": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_DriverCompanyEvol": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Calendar": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Driver": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Employee": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_VehicleGarageEvol": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Systems": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_ClosingDates": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Gender": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Translations": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Itinerary": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_TypeTrans": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Concession": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_ServiceType": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Expedition": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Town": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_ServiceSubType": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Subsituation": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Journey": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Route": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_AlsaProviders": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Fact_CompetitorsPricing": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Fact_Sales": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Fact_VehicleOccupancy": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_RutasAlsaSEO": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_TownAlias": [], "source.dbt_common_gold.bq_dim_silver_com_marital.Al_T_Dim_MaritalStatus": [], "source.dbt_common_gold.bq_dim_gld_com.Al_T_Dim_RouteJourneys": [], "source.dbt_common_gold.bq_dim_gld_com.Al_T_Dim_Line": [], "source.dbt_common_gold.bq_dim_gld_com.Al_T_Dim_JourneyLines": [], "source.dbt_common_gold.bq_dim_gld_com.Al_T_Dim_TownAlias": [], "source.dbt_common_gold.bq_dim_gld_gemini.Al_T_Dim_MunicipalityTags": [], "source.dbt_common_gold.bq_dim_gld_gemini.Al_T_Dim_MunicipalityTowns": [], "source.dbt_common_gold.bq_fact_silver_com.Al_T_Fact_Planner": [], "source.dbt_common_gold.bq_fact_silver_com.Al_T_Fact_ServiceActivity_PW": [], "source.dbt_common_gold.bq_fact_silver_com.Al_T_Fact_JourneySales": [], "source.dbt_common_gold.bq_fact_silver_com.Al_T_Fact_JourneySearches": [], "source.dbt_common_gold.bq_fact_silver_com.Al_T_Fact_Planweb_Xsercp_SA": [], "source.dbt_common_gold.bq_fact_silver_com.Al_T_Agg_PositionsControlORA": [], "source.dbt_common_gold.bq_fact_silver_com.Al_T_Agg_PositionsControlGCP": [], "source.dbt_common_gold.bq_fact_silver_com.Al_T_Dim_Systems": [], "source.dbt_common_gold.bq_fact_gld_com.Al_T_Fact_SalesSearches": [], "source.dbt_common_gold.bq_fact_gld_gemini.Al_T_Fact_TaggedMunicipalities": [], "source.dbt_common_gold.bq_com_slv.Al_T_Lkt_VehicleEvolLV_Stg1": [], "source.dbt_common_gold.bq_com_slv.Al_T_Lkt_SecondaryVehicleProvider": []}, "child_map": {"model.dbt_common_gold.Al_T_Agg_Activity_Date": [], "model.dbt_common_gold.Al_T_Dim_AlsaProviders": [], "model.dbt_common_gold.Al_T_Dim_Employee": [], "model.dbt_common_gold.Al_T_Dim_Gender": [], "model.dbt_common_gold.Al_T_Dim_JourneyLines": [], "model.dbt_common_gold.Al_T_Dim_MaritalStatus": [], "model.dbt_common_gold.Al_T_Dim_RouteJourneys": ["model.dbt_common_gold.Al_T_Fact_SalesSearches", "model.dbt_common_gold.Al_T_Fact_TravelSuggestionsByTown"], "model.dbt_common_gold.Al_T_Dim_RutasAlsaSEO": ["model.dbt_common_gold.Al_T_Fact_TravelSuggestionsByTown"], "model.dbt_common_gold.Al_T_Dim_Systems": [], "model.dbt_common_gold.Al_T_Dim_TownAlias": [], "model.dbt_common_gold.Al_T_Dim_Translations": [], "model.dbt_common_gold.dim_coche": [], "model.dbt_common_gold.dim_combustible": [], "model.dbt_common_gold.dim_concesion": [], "model.dbt_common_gold.dim_conductor": [], "model.dbt_common_gold.dim_division": [], "model.dbt_common_gold.dim_ejes": [], "model.dbt_common_gold.dim_empresas": [], "model.dbt_common_gold.dim_evolcoche": [], "model.dbt_common_gold.dim_evolcochetaller": [], "model.dbt_common_gold.dim_evolconductorempresa": [], "model.dbt_common_gold.dim_evolempresazona": [], "model.dbt_common_gold.dim_evollinea": [], "model.dbt_common_gold.dim_evollineaEO": [], "model.dbt_common_gold.dim_expedicion": [], "model.dbt_common_gold.dim_fechascierre": [], "model.dbt_common_gold.dim_gc": [], "model.dbt_common_gold.dim_itinerario": [], "model.dbt_common_gold.dim_linea": [], "model.dbt_common_gold.dim_marca": [], "model.dbt_common_gold.dim_modelo": [], "model.dbt_common_gold.dim_paradas": [], "model.dbt_common_gold.dim_pueblo": ["model.dbt_common_gold.Al_T_Fact_TravelSuggestionsByTown"], "model.dbt_common_gold.dim_servicio": [], "model.dbt_common_gold.dim_subsituacion": [], "model.dbt_common_gold.dim_tipotransporte": [], "model.dbt_common_gold.dim_uz": [], "model.dbt_common_gold.dim_zonas": [], "model.dbt_common_gold.Al_T_Fact_CompetitorsPricing": [], "model.dbt_common_gold.Al_T_Fact_PositionsControl": [], "model.dbt_common_gold.Al_T_Fact_Sales": [], "model.dbt_common_gold.Al_T_Fact_SalesSearches": ["model.dbt_common_gold.Al_T_Fact_TravelSuggestionsByTown"], "model.dbt_common_gold.Al_T_Fact_ServiceActivity_PW": [], "model.dbt_common_gold.Al_T_Fact_TravelSuggestions": [], "model.dbt_common_gold.Al_T_Fact_TravelSuggestionsByTown": [], "model.dbt_common_gold.Al_T_Fact_VehicleOccupancy": [], "model.dbt_common_gold.Al_T_Lkt_SecondaryVehicleProvider": [], "model.dbt_common_gold.Al_T_Lkt_VehicleEvolLV": [], "source.dbt_common_gold.bq_agg_silver_com.Al_T_Agg_Activity_Date": ["model.dbt_common_gold.Al_T_Agg_Activity_Date"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Vehicle": ["model.dbt_common_gold.dim_coche"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Line": ["model.dbt_common_gold.dim_linea"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Stops": ["model.dbt_common_gold.dim_paradas"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Shapes": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Zone": ["model.dbt_common_gold.dim_zonas"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Division": ["model.dbt_common_gold.dim_division"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_ZonalUnit": ["model.dbt_common_gold.dim_uz"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Axis": ["model.dbt_common_gold.dim_ejes"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Company": ["model.dbt_common_gold.dim_empresas"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Brand": ["model.dbt_common_gold.dim_marca"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Model": ["model.dbt_common_gold.dim_modelo"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Fuel": ["model.dbt_common_gold.dim_combustible"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_ContractGroup": ["model.dbt_common_gold.dim_gc"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_LineEvol": ["model.dbt_common_gold.dim_evollinea"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_LineEvolOS": ["model.dbt_common_gold.dim_evollineaEO"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_CompanyZoneEvol": ["model.dbt_common_gold.dim_evolempresazona"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_VehicleEvol": ["model.dbt_common_gold.dim_evolcoche"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_DriverCompanyEvol": ["model.dbt_common_gold.dim_evolconductorempresa"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Calendar": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Driver": ["model.dbt_common_gold.dim_conductor"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Employee": ["model.dbt_common_gold.Al_T_Dim_Employee"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_VehicleGarageEvol": ["model.dbt_common_gold.dim_evolcochetaller"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Systems": ["model.dbt_common_gold.Al_T_Dim_Systems"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_ClosingDates": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Gender": ["model.dbt_common_gold.Al_T_Dim_Gender"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Translations": ["model.dbt_common_gold.Al_T_Dim_Translations"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Itinerary": ["model.dbt_common_gold.dim_itinerario"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_TypeTrans": ["model.dbt_common_gold.dim_tipotransporte"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Concession": ["model.dbt_common_gold.dim_concesion"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_ServiceType": ["model.dbt_common_gold.dim_servicio"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Expedition": ["model.dbt_common_gold.dim_expedicion"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Town": ["model.dbt_common_gold.dim_pueblo"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_ServiceSubType": ["model.dbt_common_gold.dim_subsituacion"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Subsituation": [], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Journey": ["model.dbt_common_gold.Al_T_Dim_JourneyLines", "model.dbt_common_gold.Al_T_Dim_RouteJourneys"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_Route": ["model.dbt_common_gold.Al_T_Dim_JourneyLines", "model.dbt_common_gold.Al_T_Dim_RouteJourneys"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_AlsaProviders": ["model.dbt_common_gold.Al_T_Dim_AlsaProviders"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Fact_CompetitorsPricing": ["model.dbt_common_gold.Al_T_Fact_CompetitorsPricing"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Fact_Sales": ["model.dbt_common_gold.Al_T_Fact_Sales"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Fact_VehicleOccupancy": ["model.dbt_common_gold.Al_T_Fact_VehicleOccupancy"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_RutasAlsaSEO": ["model.dbt_common_gold.Al_T_Dim_RutasAlsaSEO"], "source.dbt_common_gold.bq_dim_silver_com.Al_T_Dim_TownAlias": ["model.dbt_common_gold.Al_T_Dim_TownAlias"], "source.dbt_common_gold.bq_dim_silver_com_marital.Al_T_Dim_MaritalStatus": ["model.dbt_common_gold.Al_T_Dim_MaritalStatus"], "source.dbt_common_gold.bq_dim_gld_com.Al_T_Dim_RouteJourneys": ["model.dbt_common_gold.Al_T_Fact_TravelSuggestions"], "source.dbt_common_gold.bq_dim_gld_com.Al_T_Dim_Line": ["model.dbt_common_gold.Al_T_Fact_TravelSuggestions"], "source.dbt_common_gold.bq_dim_gld_com.Al_T_Dim_JourneyLines": ["model.dbt_common_gold.Al_T_Fact_TravelSuggestions"], "source.dbt_common_gold.bq_dim_gld_com.Al_T_Dim_TownAlias": ["model.dbt_common_gold.Al_T_Fact_TravelSuggestions"], "source.dbt_common_gold.bq_dim_gld_gemini.Al_T_Dim_MunicipalityTags": ["model.dbt_common_gold.Al_T_Fact_TravelSuggestions", "model.dbt_common_gold.Al_T_Fact_TravelSuggestionsByTown"], "source.dbt_common_gold.bq_dim_gld_gemini.Al_T_Dim_MunicipalityTowns": ["model.dbt_common_gold.Al_T_Fact_TravelSuggestions", "model.dbt_common_gold.Al_T_Fact_TravelSuggestionsByTown"], "source.dbt_common_gold.bq_fact_silver_com.Al_T_Fact_Planner": [], "source.dbt_common_gold.bq_fact_silver_com.Al_T_Fact_ServiceActivity_PW": ["model.dbt_common_gold.Al_T_Fact_ServiceActivity_PW"], "source.dbt_common_gold.bq_fact_silver_com.Al_T_Fact_JourneySales": ["model.dbt_common_gold.Al_T_Fact_SalesSearches"], "source.dbt_common_gold.bq_fact_silver_com.Al_T_Fact_JourneySearches": ["model.dbt_common_gold.Al_T_Fact_SalesSearches"], "source.dbt_common_gold.bq_fact_silver_com.Al_T_Fact_Planweb_Xsercp_SA": [], "source.dbt_common_gold.bq_fact_silver_com.Al_T_Agg_PositionsControlORA": ["model.dbt_common_gold.Al_T_Fact_PositionsControl"], "source.dbt_common_gold.bq_fact_silver_com.Al_T_Agg_PositionsControlGCP": ["model.dbt_common_gold.Al_T_Fact_PositionsControl"], "source.dbt_common_gold.bq_fact_silver_com.Al_T_Dim_Systems": ["model.dbt_common_gold.Al_T_Fact_PositionsControl"], "source.dbt_common_gold.bq_fact_gld_com.Al_T_Fact_SalesSearches": ["model.dbt_common_gold.Al_T_Fact_TravelSuggestions"], "source.dbt_common_gold.bq_fact_gld_gemini.Al_T_Fact_TaggedMunicipalities": ["model.dbt_common_gold.Al_T_Fact_TravelSuggestions", "model.dbt_common_gold.Al_T_Fact_TravelSuggestionsByTown"], "source.dbt_common_gold.bq_com_slv.Al_T_Lkt_VehicleEvolLV_Stg1": ["model.dbt_common_gold.Al_T_Lkt_VehicleEvolLV"], "source.dbt_common_gold.bq_com_slv.Al_T_Lkt_SecondaryVehicleProvider": ["model.dbt_common_gold.Al_T_Lkt_SecondaryVehicleProvider"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}